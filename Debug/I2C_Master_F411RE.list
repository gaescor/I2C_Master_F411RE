
I2C_Master_F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000365c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080037fc  080037fc  000047fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800392c  0800392c  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800392c  0800392c  0000492c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003934  08003934  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003934  08003934  00004934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003938  08003938  00004938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800393c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000005c  08003998  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08003998  00005268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fba  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e3  00000000  00000000  0000f046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000928  00000000  00000000  00010730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000072f  00000000  00000000  00011058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c93  00000000  00000000  00011787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9b9  00000000  00000000  0002741a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008840f  00000000  00000000  00032dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb1e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b38  00000000  00000000  000bb228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000bdd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080037e4 	.word	0x080037e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080037e4 	.word	0x080037e4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
// Callback que se ejecuta cuando hay una interrupción EXTI
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005bc:	b5b0      	push	{r4, r5, r7, lr}
 80005be:	b08a      	sub	sp, #40	@ 0x28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13)
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005cc:	d11a      	bne.n	8000604 <HAL_GPIO_EXTI_Callback+0x48>
    {
        buttonPressed = 1;
 80005ce:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <HAL_GPIO_EXTI_Callback+0x50>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	701a      	strb	r2, [r3, #0]
        char msg[] = "Interrupcion recibida en PC13\r\n";
 80005d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <HAL_GPIO_EXTI_Callback+0x54>)
 80005d6:	f107 0408 	add.w	r4, r7, #8
 80005da:	461d      	mov	r5, r3
 80005dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80005e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff fdf7 	bl	80001e0 <strlen>
 80005f2:	4603      	mov	r3, r0
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	f107 0108 	add.w	r1, r7, #8
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	4805      	ldr	r0, [pc, #20]	@ (8000614 <HAL_GPIO_EXTI_Callback+0x58>)
 8000600:	f002 f894 	bl	800272c <HAL_UART_Transmit>
    }
}
 8000604:	bf00      	nop
 8000606:	3728      	adds	r7, #40	@ 0x28
 8000608:	46bd      	mov	sp, r7
 800060a:	bdb0      	pop	{r4, r5, r7, pc}
 800060c:	20000114 	.word	0x20000114
 8000610:	080037fc 	.word	0x080037fc
 8000614:	200000cc 	.word	0x200000cc

08000618 <WaitForButtonPress>:

void WaitForButtonPress(void)
{
 8000618:	b5b0      	push	{r4, r5, r7, lr}
 800061a:	b0a2      	sub	sp, #136	@ 0x88
 800061c:	af00      	add	r7, sp, #0


    // Espera hasta que la interrupción marque la bandera
    while (!buttonPressed)
 800061e:	e016      	b.n	800064e <WaitForButtonPress+0x36>
    {
        // se queda en espera
    	char msg[] = "Sistema inicializado.\r\nPresione el pulsador para iniciar la transmision I2C...\r\n";
 8000620:	4a20      	ldr	r2, [pc, #128]	@ (80006a4 <WaitForButtonPress+0x8c>)
 8000622:	463b      	mov	r3, r7
 8000624:	4611      	mov	r1, r2
 8000626:	2251      	movs	r2, #81	@ 0x51
 8000628:	4618      	mov	r0, r3
 800062a:	f002 fc91 	bl	8002f50 <memcpy>
    	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800062e:	463b      	mov	r3, r7
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff fdd5 	bl	80001e0 <strlen>
 8000636:	4603      	mov	r3, r0
 8000638:	b29a      	uxth	r2, r3
 800063a:	4639      	mov	r1, r7
 800063c:	f04f 33ff 	mov.w	r3, #4294967295
 8000640:	4819      	ldr	r0, [pc, #100]	@ (80006a8 <WaitForButtonPress+0x90>)
 8000642:	f002 f873 	bl	800272c <HAL_UART_Transmit>
    	HAL_Delay(3000);
 8000646:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800064a:	f000 fbe3 	bl	8000e14 <HAL_Delay>
    while (!buttonPressed)
 800064e:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <WaitForButtonPress+0x94>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	2b00      	cmp	r3, #0
 8000656:	d0e3      	beq.n	8000620 <WaitForButtonPress+0x8>
    }

    char msg2[] = "Pulsador detectado, iniciando transmision I2C...\r\n";
 8000658:	4b15      	ldr	r3, [pc, #84]	@ (80006b0 <WaitForButtonPress+0x98>)
 800065a:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800065e:	461d      	mov	r5, r3
 8000660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066c:	682b      	ldr	r3, [r5, #0]
 800066e:	461a      	mov	r2, r3
 8000670:	8022      	strh	r2, [r4, #0]
 8000672:	3402      	adds	r4, #2
 8000674:	0c1b      	lsrs	r3, r3, #16
 8000676:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)msg2, strlen(msg2), HAL_MAX_DELAY);
 8000678:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff fdaf 	bl	80001e0 <strlen>
 8000682:	4603      	mov	r3, r0
 8000684:	b29a      	uxth	r2, r3
 8000686:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	4806      	ldr	r0, [pc, #24]	@ (80006a8 <WaitForButtonPress+0x90>)
 8000690:	f002 f84c 	bl	800272c <HAL_UART_Transmit>

    HAL_Delay(200); // anti-rebote
 8000694:	20c8      	movs	r0, #200	@ 0xc8
 8000696:	f000 fbbd 	bl	8000e14 <HAL_Delay>
}
 800069a:	bf00      	nop
 800069c:	3788      	adds	r7, #136	@ 0x88
 800069e:	46bd      	mov	sp, r7
 80006a0:	bdb0      	pop	{r4, r5, r7, pc}
 80006a2:	bf00      	nop
 80006a4:	0800381c 	.word	0x0800381c
 80006a8:	200000cc 	.word	0x200000cc
 80006ac:	20000114 	.word	0x20000114
 80006b0:	08003870 	.word	0x08003870

080006b4 <I2C_ClearBusyFlagErratum>:


void I2C_ClearBusyFlagErratum(I2C_HandleTypeDef *hi2c)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	@ 0x28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]

    // 1. Resetear y deshabilitar I2C
    __HAL_RCC_I2C1_FORCE_RESET();
 80006cc:	4b35      	ldr	r3, [pc, #212]	@ (80007a4 <I2C_ClearBusyFlagErratum+0xf0>)
 80006ce:	6a1b      	ldr	r3, [r3, #32]
 80006d0:	4a34      	ldr	r2, [pc, #208]	@ (80007a4 <I2C_ClearBusyFlagErratum+0xf0>)
 80006d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006d6:	6213      	str	r3, [r2, #32]
    __HAL_RCC_I2C1_RELEASE_RESET();
 80006d8:	4b32      	ldr	r3, [pc, #200]	@ (80007a4 <I2C_ClearBusyFlagErratum+0xf0>)
 80006da:	6a1b      	ldr	r3, [r3, #32]
 80006dc:	4a31      	ldr	r2, [pc, #196]	@ (80007a4 <I2C_ClearBusyFlagErratum+0xf0>)
 80006de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80006e2:	6213      	str	r3, [r2, #32]
    __HAL_RCC_I2C1_CLK_DISABLE();
 80006e4:	4b2f      	ldr	r3, [pc, #188]	@ (80007a4 <I2C_ClearBusyFlagErratum+0xf0>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e8:	4a2e      	ldr	r2, [pc, #184]	@ (80007a4 <I2C_ClearBusyFlagErratum+0xf0>)
 80006ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80006ee:	6413      	str	r3, [r2, #64]	@ 0x40

    // 2. Configurar PB6 (SCL) y PB7 (SDA) como GPIO open-drain
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 80006f0:	2311      	movs	r3, #17
 80006f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f8:	2302      	movs	r3, #2
 80006fa:	61fb      	str	r3, [r7, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_6; // SCL
 80006fc:	2340      	movs	r3, #64	@ 0x40
 80006fe:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	4619      	mov	r1, r3
 8000706:	4828      	ldr	r0, [pc, #160]	@ (80007a8 <I2C_ClearBusyFlagErratum+0xf4>)
 8000708:	f000 fcba 	bl	8001080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7; // SDA
 800070c:	2380      	movs	r3, #128	@ 0x80
 800070e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	4619      	mov	r1, r3
 8000716:	4824      	ldr	r0, [pc, #144]	@ (80007a8 <I2C_ClearBusyFlagErratum+0xf4>)
 8000718:	f000 fcb2 	bl	8001080 <HAL_GPIO_Init>

    // 3. Generar 9 pulsos en SCL
    for (int i = 0; i < 9; i++)
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000720:	e012      	b.n	8000748 <I2C_ClearBusyFlagErratum+0x94>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2140      	movs	r1, #64	@ 0x40
 8000726:	4820      	ldr	r0, [pc, #128]	@ (80007a8 <I2C_ClearBusyFlagErratum+0xf4>)
 8000728:	f000 fe2e 	bl	8001388 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800072c:	2001      	movs	r0, #1
 800072e:	f000 fb71 	bl	8000e14 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	2140      	movs	r1, #64	@ 0x40
 8000736:	481c      	ldr	r0, [pc, #112]	@ (80007a8 <I2C_ClearBusyFlagErratum+0xf4>)
 8000738:	f000 fe26 	bl	8001388 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800073c:	2001      	movs	r0, #1
 800073e:	f000 fb69 	bl	8000e14 <HAL_Delay>
    for (int i = 0; i < 9; i++)
 8000742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000744:	3301      	adds	r3, #1
 8000746:	627b      	str	r3, [r7, #36]	@ 0x24
 8000748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074a:	2b08      	cmp	r3, #8
 800074c:	dde9      	ble.n	8000722 <I2C_ClearBusyFlagErratum+0x6e>
    }

    // 4. Generar STOP manual
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // SDA alto
 800074e:	2201      	movs	r2, #1
 8000750:	2180      	movs	r1, #128	@ 0x80
 8000752:	4815      	ldr	r0, [pc, #84]	@ (80007a8 <I2C_ClearBusyFlagErratum+0xf4>)
 8000754:	f000 fe18 	bl	8001388 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // SCL alto
 8000758:	2201      	movs	r2, #1
 800075a:	2140      	movs	r1, #64	@ 0x40
 800075c:	4812      	ldr	r0, [pc, #72]	@ (80007a8 <I2C_ClearBusyFlagErratum+0xf4>)
 800075e:	f000 fe13 	bl	8001388 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000762:	2001      	movs	r0, #1
 8000764:	f000 fb56 	bl	8000e14 <HAL_Delay>

    // 5. Restaurar configuración de pines a función I2C
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000768:	2312      	movs	r3, #18
 800076a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800076c:	2304      	movs	r3, #4
 800076e:	623b      	str	r3, [r7, #32]

    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000770:	23c0      	movs	r3, #192	@ 0xc0
 8000772:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	4619      	mov	r1, r3
 800077a:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <I2C_ClearBusyFlagErratum+0xf4>)
 800077c:	f000 fc80 	bl	8001080 <HAL_GPIO_Init>

    // 6. Habilitar reloj de nuevo
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <I2C_ClearBusyFlagErratum+0xf0>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000788:	4a06      	ldr	r2, [pc, #24]	@ (80007a4 <I2C_ClearBusyFlagErratum+0xf0>)
 800078a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800078e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000790:	4b04      	ldr	r3, [pc, #16]	@ (80007a4 <I2C_ClearBusyFlagErratum+0xf0>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000794:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]
}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	@ 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020400 	.word	0x40020400

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b5b0      	push	{r4, r5, r7, lr}
 80007ae:	b090      	sub	sp, #64	@ 0x40
 80007b0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  uint8_t data[2] = {'A', 'B'};
 80007b2:	f244 2341 	movw	r3, #16961	@ 0x4241
 80007b6:	86bb      	strh	r3, [r7, #52]	@ 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b8:	f000 faba 	bl	8000d30 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80007bc:	f000 f90a 	bl	80009d4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c0:	f000 f8c2 	bl	8000948 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007c4:	f000 f864 	bl	8000890 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80007c8:	f000 f894 	bl	80008f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  strcpy(msg, "Inicio Master I2C\r\n");
 80007cc:	463b      	mov	r3, r7
 80007ce:	4a2b      	ldr	r2, [pc, #172]	@ (800087c <main+0xd0>)
 80007d0:	461c      	mov	r4, r3
 80007d2:	4615      	mov	r5, r2
 80007d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d8:	682b      	ldr	r3, [r5, #0]
 80007da:	6023      	str	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80007dc:	463b      	mov	r3, r7
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff fcfe 	bl	80001e0 <strlen>
 80007e4:	4603      	mov	r3, r0
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4639      	mov	r1, r7
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
 80007ee:	4824      	ldr	r0, [pc, #144]	@ (8000880 <main+0xd4>)
 80007f0:	f001 ff9c 	bl	800272c <HAL_UART_Transmit>

  HAL_Delay(2000);
 80007f4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007f8:	f000 fb0c 	bl	8000e14 <HAL_Delay>

  // Esperar a que el usuario presione el botón antes de entrar al while
  WaitForButtonPress();
 80007fc:	f7ff ff0c 	bl	8000618 <WaitForButtonPress>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS, data, 2, TIMEOUT);
 8000800:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000804:	2364      	movs	r3, #100	@ 0x64
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	2160      	movs	r1, #96	@ 0x60
 800080c:	481d      	ldr	r0, [pc, #116]	@ (8000884 <main+0xd8>)
 800080e:	f000 ff4b 	bl	80016a8 <HAL_I2C_Master_Transmit>
 8000812:	4603      	mov	r3, r0
 8000814:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (res == HAL_OK) {
 8000818:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800081c:	2b00      	cmp	r3, #0
 800081e:	d115      	bne.n	800084c <main+0xa0>
      sprintf(msg, "TX OK: %c %c\r\n", data[0], data[1]);
 8000820:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000824:	461a      	mov	r2, r3
 8000826:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800082a:	4638      	mov	r0, r7
 800082c:	4916      	ldr	r1, [pc, #88]	@ (8000888 <main+0xdc>)
 800082e:	f002 fb39 	bl	8002ea4 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000832:	463b      	mov	r3, r7
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fcd3 	bl	80001e0 <strlen>
 800083a:	4603      	mov	r3, r0
 800083c:	b29a      	uxth	r2, r3
 800083e:	4639      	mov	r1, r7
 8000840:	f04f 33ff 	mov.w	r3, #4294967295
 8000844:	480e      	ldr	r0, [pc, #56]	@ (8000880 <main+0xd4>)
 8000846:	f001 ff71 	bl	800272c <HAL_UART_Transmit>
 800084a:	e012      	b.n	8000872 <main+0xc6>
    } else {
      sprintf(msg, "Error en TX I2C: %d\r\n", res);
 800084c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000850:	463b      	mov	r3, r7
 8000852:	490e      	ldr	r1, [pc, #56]	@ (800088c <main+0xe0>)
 8000854:	4618      	mov	r0, r3
 8000856:	f002 fb25 	bl	8002ea4 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800085a:	463b      	mov	r3, r7
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fcbf 	bl	80001e0 <strlen>
 8000862:	4603      	mov	r3, r0
 8000864:	b29a      	uxth	r2, r3
 8000866:	4639      	mov	r1, r7
 8000868:	f04f 33ff 	mov.w	r3, #4294967295
 800086c:	4804      	ldr	r0, [pc, #16]	@ (8000880 <main+0xd4>)
 800086e:	f001 ff5d 	bl	800272c <HAL_UART_Transmit>
    }

    HAL_Delay(1000);
 8000872:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000876:	f000 facd 	bl	8000e14 <HAL_Delay>
  {
 800087a:	e7c1      	b.n	8000800 <main+0x54>
 800087c:	080038a4 	.word	0x080038a4
 8000880:	200000cc 	.word	0x200000cc
 8000884:	20000078 	.word	0x20000078
 8000888:	080038b8 	.word	0x080038b8
 800088c:	080038c8 	.word	0x080038c8

08000890 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
	 I2C_ClearBusyFlagErratum(&hi2c1);
 8000894:	4814      	ldr	r0, [pc, #80]	@ (80008e8 <MX_I2C1_Init+0x58>)
 8000896:	f7ff ff0d 	bl	80006b4 <I2C_ClearBusyFlagErratum>
  /* USER CODE END I2C1_Init 0 */

  hi2c1.Instance = I2C1;
 800089a:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <MX_I2C1_Init+0x58>)
 800089c:	4a13      	ldr	r2, [pc, #76]	@ (80008ec <MX_I2C1_Init+0x5c>)
 800089e:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_I2C1_Init+0x58>)
 80008a2:	4a13      	ldr	r2, [pc, #76]	@ (80008f0 <MX_I2C1_Init+0x60>)
 80008a4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008a6:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <MX_I2C1_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ac:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_I2C1_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b2:	4b0d      	ldr	r3, [pc, #52]	@ (80008e8 <MX_I2C1_Init+0x58>)
 80008b4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <MX_I2C1_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008c0:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <MX_I2C1_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <MX_I2C1_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <MX_I2C1_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_I2C1_Init+0x58>)
 80008d4:	f000 fda4 	bl	8001420 <HAL_I2C_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_I2C1_Init+0x52>
  {
    Error_Handler();
 80008de:	f000 f8b5 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000078 	.word	0x20000078
 80008ec:	40005400 	.word	0x40005400
 80008f0:	000186a0 	.word	0x000186a0

080008f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  huart2.Instance = USART2;
 80008f8:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <MX_USART2_UART_Init+0x4c>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	@ (8000944 <MX_USART2_UART_Init+0x50>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008fe:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <MX_USART2_UART_Init+0x4c>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <MX_USART2_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <MX_USART2_UART_Init+0x4c>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <MX_USART2_UART_Init+0x4c>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <MX_USART2_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <MX_USART2_UART_Init+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	@ (8000940 <MX_USART2_UART_Init+0x4c>)
 800092c:	f001 feae 	bl	800268c <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000936:	f000 f889 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200000cc 	.word	0x200000cc
 8000944:	40004400 	.word	0x40004400

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_0 */
  /* USER CODE END MX_GPIO_Init_0 */

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	4b1e      	ldr	r3, [pc, #120]	@ (80009cc <MX_GPIO_Init+0x84>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a1d      	ldr	r2, [pc, #116]	@ (80009cc <MX_GPIO_Init+0x84>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b1b      	ldr	r3, [pc, #108]	@ (80009cc <MX_GPIO_Init+0x84>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b17      	ldr	r3, [pc, #92]	@ (80009cc <MX_GPIO_Init+0x84>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a16      	ldr	r2, [pc, #88]	@ (80009cc <MX_GPIO_Init+0x84>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <MX_GPIO_Init+0x84>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* Configurar PC13 como entrada con interrupción (Botón USER) */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000996:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800099a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800099c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4619      	mov	r1, r3
 80009ac:	4808      	ldr	r0, [pc, #32]	@ (80009d0 <MX_GPIO_Init+0x88>)
 80009ae:	f000 fb67 	bl	8001080 <HAL_GPIO_Init>

  /* Habilitar EXTI Line interrupt */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2028      	movs	r0, #40	@ 0x28
 80009b8:	f000 fb2b 	bl	8001012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009bc:	2028      	movs	r0, #40	@ 0x28
 80009be:	f000 fb44 	bl	800104a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80009c2:	bf00      	nop
 80009c4:	3720      	adds	r7, #32
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020800 	.word	0x40020800

080009d4 <SystemClock_Config>:
/**
  * @brief  System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b092      	sub	sp, #72	@ 0x48
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 0318 	add.w	r3, r7, #24
 80009de:	2230      	movs	r2, #48	@ 0x30
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f002 fa80 	bl	8002ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  /* Oscilador HSI */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009fa:	2301      	movs	r3, #1
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009fe:	2310      	movs	r3, #16
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a06:	f107 0318 	add.w	r3, r7, #24
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f001 f9a6 	bl	8001d5c <HAL_RCC_OscConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a16:	f000 f819 	bl	8000a4c <Error_Handler>
  }

  /* Reloj SYSCLK = HSI */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a1a:	230f      	movs	r3, #15
 8000a1c:	607b      	str	r3, [r7, #4]
                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f001 fc0a 	bl	800224c <HAL_RCC_ClockConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a3e:	f000 f805 	bl	8000a4c <Error_Handler>
  }
}
 8000a42:	bf00      	nop
 8000a44:	3748      	adds	r7, #72	@ 0x48
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  __disable_irq();
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000a54:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a58:	4803      	ldr	r0, [pc, #12]	@ (8000a68 <Error_Handler+0x1c>)
 8000a5a:	f000 fcae 	bl	80013ba <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000a5e:	20c8      	movs	r0, #200	@ 0xc8
 8000a60:	f000 f9d8 	bl	8000e14 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000a64:	bf00      	nop
 8000a66:	e7f5      	b.n	8000a54 <Error_Handler+0x8>
 8000a68:	40020800 	.word	0x40020800

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <HAL_MspInit+0x4c>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab8 <HAL_MspInit+0x4c>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a82:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <HAL_MspInit+0x4c>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	4a08      	ldr	r2, [pc, #32]	@ (8000ab8 <HAL_MspInit+0x4c>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aaa:	2007      	movs	r0, #7
 8000aac:	f000 faa6 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800

08000abc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	@ 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a19      	ldr	r2, [pc, #100]	@ (8000b40 <HAL_I2C_MspInit+0x84>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d12c      	bne.n	8000b38 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <HAL_I2C_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a17      	ldr	r2, [pc, #92]	@ (8000b44 <HAL_I2C_MspInit+0x88>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <HAL_I2C_MspInit+0x88>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000afa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b00:	2312      	movs	r3, #18
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <HAL_I2C_MspInit+0x8c>)
 8000b18:	f000 fab2 	bl	8001080 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <HAL_I2C_MspInit+0x88>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b24:	4a07      	ldr	r2, [pc, #28]	@ (8000b44 <HAL_I2C_MspInit+0x88>)
 8000b26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <HAL_I2C_MspInit+0x88>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	@ 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40005400 	.word	0x40005400
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020400 	.word	0x40020400

08000b4c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	@ 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a19      	ldr	r2, [pc, #100]	@ (8000bd0 <HAL_UART_MspInit+0x84>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d12b      	bne.n	8000bc6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b76:	4a17      	ldr	r2, [pc, #92]	@ (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b7e:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	4a10      	ldr	r2, [pc, #64]	@ (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ba6:	230c      	movs	r3, #12
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb6:	2307      	movs	r3, #7
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <HAL_UART_MspInit+0x8c>)
 8000bc2:	f000 fa5d 	bl	8001080 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bc6:	bf00      	nop
 8000bc8:	3728      	adds	r7, #40	@ 0x28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40004400 	.word	0x40004400
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020000 	.word	0x40020000

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <NMI_Handler+0x4>

08000be4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c32:	f000 f8cf 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c3e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c42:	f000 fbd5 	bl	80013f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c54:	4a14      	ldr	r2, [pc, #80]	@ (8000ca8 <_sbrk+0x5c>)
 8000c56:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <_sbrk+0x60>)
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c60:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d102      	bne.n	8000c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c68:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <_sbrk+0x64>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	@ (8000cb4 <_sbrk+0x68>)
 8000c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6e:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d207      	bcs.n	8000c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c7c:	f002 f93c 	bl	8002ef8 <__errno>
 8000c80:	4603      	mov	r3, r0
 8000c82:	220c      	movs	r2, #12
 8000c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	e009      	b.n	8000ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c8c:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c92:	4b07      	ldr	r3, [pc, #28]	@ (8000cb0 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	4a05      	ldr	r2, [pc, #20]	@ (8000cb0 <_sbrk+0x64>)
 8000c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20020000 	.word	0x20020000
 8000cac:	00000400 	.word	0x00000400
 8000cb0:	20000118 	.word	0x20000118
 8000cb4:	20000268 	.word	0x20000268

08000cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <SystemInit+0x20>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cc2:	4a05      	ldr	r2, [pc, #20]	@ (8000cd8 <SystemInit+0x20>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ce0:	f7ff ffea 	bl	8000cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce4:	480c      	ldr	r0, [pc, #48]	@ (8000d18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ce6:	490d      	ldr	r1, [pc, #52]	@ (8000d1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cec:	e002      	b.n	8000cf4 <LoopCopyDataInit>

08000cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf2:	3304      	adds	r3, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf8:	d3f9      	bcc.n	8000cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000d24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000d28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d00:	e001      	b.n	8000d06 <LoopFillZerobss>

08000d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d04:	3204      	adds	r2, #4

08000d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d08:	d3fb      	bcc.n	8000d02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d0a:	f002 f8fb 	bl	8002f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d0e:	f7ff fd4d 	bl	80007ac <main>
  bx  lr    
 8000d12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d1c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d20:	0800393c 	.word	0x0800393c
  ldr r2, =_sbss
 8000d24:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d28:	20000268 	.word	0x20000268

08000d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC_IRQHandler>
	...

08000d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d34:	4b0e      	ldr	r3, [pc, #56]	@ (8000d70 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0d      	ldr	r2, [pc, #52]	@ (8000d70 <HAL_Init+0x40>)
 8000d3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d40:	4b0b      	ldr	r3, [pc, #44]	@ (8000d70 <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0a      	ldr	r2, [pc, #40]	@ (8000d70 <HAL_Init+0x40>)
 8000d46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d4c:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a07      	ldr	r2, [pc, #28]	@ (8000d70 <HAL_Init+0x40>)
 8000d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 f94f 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f000 f808 	bl	8000d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d64:	f7ff fe82 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023c00 	.word	0x40023c00

08000d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <HAL_InitTick+0x54>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <HAL_InitTick+0x58>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f967 	bl	8001066 <HAL_SYSTICK_Config>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00e      	b.n	8000dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d80a      	bhi.n	8000dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	2200      	movs	r2, #0
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f000 f92f 	bl	8001012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db4:	4a06      	ldr	r2, [pc, #24]	@ (8000dd0 <HAL_InitTick+0x5c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e000      	b.n	8000dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_IncTick+0x20>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <HAL_IncTick+0x24>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a04      	ldr	r2, [pc, #16]	@ (8000df8 <HAL_IncTick+0x24>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008
 8000df8:	2000011c 	.word	0x2000011c

08000dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b03      	ldr	r3, [pc, #12]	@ (8000e10 <HAL_GetTick+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	2000011c 	.word	0x2000011c

08000e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e1c:	f7ff ffee 	bl	8000dfc <HAL_GetTick>
 8000e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e2c:	d005      	beq.n	8000e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <HAL_Delay+0x44>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e3a:	bf00      	nop
 8000e3c:	f7ff ffde 	bl	8000dfc <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d8f7      	bhi.n	8000e3c <HAL_Delay+0x28>
  {
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	db0b      	blt.n	8000eea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 021f 	and.w	r2, r3, #31
 8000ed8:	4907      	ldr	r1, [pc, #28]	@ (8000ef8 <__NVIC_EnableIRQ+0x38>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000e100 	.word	0xe000e100

08000efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db0a      	blt.n	8000f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	490c      	ldr	r1, [pc, #48]	@ (8000f48 <__NVIC_SetPriority+0x4c>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f24:	e00a      	b.n	8000f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4908      	ldr	r1, [pc, #32]	@ (8000f4c <__NVIC_SetPriority+0x50>)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	3b04      	subs	r3, #4
 8000f34:	0112      	lsls	r2, r2, #4
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	440b      	add	r3, r1
 8000f3a:	761a      	strb	r2, [r3, #24]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	@ 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f1c3 0307 	rsb	r3, r3, #7
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	bf28      	it	cs
 8000f6e:	2304      	movcs	r3, #4
 8000f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3304      	adds	r3, #4
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d902      	bls.n	8000f80 <NVIC_EncodePriority+0x30>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3b03      	subs	r3, #3
 8000f7e:	e000      	b.n	8000f82 <NVIC_EncodePriority+0x32>
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	401a      	ands	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43d9      	mvns	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	4313      	orrs	r3, r2
         );
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3724      	adds	r7, #36	@ 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fc8:	d301      	bcc.n	8000fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00f      	b.n	8000fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fce:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <SysTick_Config+0x40>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f7ff ff8e 	bl	8000efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe0:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <SysTick_Config+0x40>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe6:	4b04      	ldr	r3, [pc, #16]	@ (8000ff8 <SysTick_Config+0x40>)
 8000fe8:	2207      	movs	r2, #7
 8000fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	e000e010 	.word	0xe000e010

08000ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff29 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001024:	f7ff ff3e 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8001028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	6978      	ldr	r0, [r7, #20]
 8001030:	f7ff ff8e 	bl	8000f50 <NVIC_EncodePriority>
 8001034:	4602      	mov	r2, r0
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff5d 	bl	8000efc <__NVIC_SetPriority>
}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff31 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ffa2 	bl	8000fb8 <SysTick_Config>
 8001074:	4603      	mov	r3, r0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	@ 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	e159      	b.n	8001350 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800109c:	2201      	movs	r2, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	f040 8148 	bne.w	800134a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d005      	beq.n	80010d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d130      	bne.n	8001134 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001108:	2201      	movs	r2, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	091b      	lsrs	r3, r3, #4
 800111e:	f003 0201 	and.w	r2, r3, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b03      	cmp	r3, #3
 800113e:	d017      	beq.n	8001170 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d123      	bne.n	80011c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	08da      	lsrs	r2, r3, #3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3208      	adds	r2, #8
 8001184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	220f      	movs	r2, #15
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	691a      	ldr	r2, [r3, #16]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	08da      	lsrs	r2, r3, #3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3208      	adds	r2, #8
 80011be:	69b9      	ldr	r1, [r7, #24]
 80011c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0203 	and.w	r2, r3, #3
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 80a2 	beq.w	800134a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b57      	ldr	r3, [pc, #348]	@ (8001368 <HAL_GPIO_Init+0x2e8>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120e:	4a56      	ldr	r2, [pc, #344]	@ (8001368 <HAL_GPIO_Init+0x2e8>)
 8001210:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001214:	6453      	str	r3, [r2, #68]	@ 0x44
 8001216:	4b54      	ldr	r3, [pc, #336]	@ (8001368 <HAL_GPIO_Init+0x2e8>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001222:	4a52      	ldr	r2, [pc, #328]	@ (800136c <HAL_GPIO_Init+0x2ec>)
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	3302      	adds	r3, #2
 800122a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	220f      	movs	r2, #15
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a49      	ldr	r2, [pc, #292]	@ (8001370 <HAL_GPIO_Init+0x2f0>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d019      	beq.n	8001282 <HAL_GPIO_Init+0x202>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a48      	ldr	r2, [pc, #288]	@ (8001374 <HAL_GPIO_Init+0x2f4>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d013      	beq.n	800127e <HAL_GPIO_Init+0x1fe>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a47      	ldr	r2, [pc, #284]	@ (8001378 <HAL_GPIO_Init+0x2f8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d00d      	beq.n	800127a <HAL_GPIO_Init+0x1fa>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a46      	ldr	r2, [pc, #280]	@ (800137c <HAL_GPIO_Init+0x2fc>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d007      	beq.n	8001276 <HAL_GPIO_Init+0x1f6>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a45      	ldr	r2, [pc, #276]	@ (8001380 <HAL_GPIO_Init+0x300>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d101      	bne.n	8001272 <HAL_GPIO_Init+0x1f2>
 800126e:	2304      	movs	r3, #4
 8001270:	e008      	b.n	8001284 <HAL_GPIO_Init+0x204>
 8001272:	2307      	movs	r3, #7
 8001274:	e006      	b.n	8001284 <HAL_GPIO_Init+0x204>
 8001276:	2303      	movs	r3, #3
 8001278:	e004      	b.n	8001284 <HAL_GPIO_Init+0x204>
 800127a:	2302      	movs	r3, #2
 800127c:	e002      	b.n	8001284 <HAL_GPIO_Init+0x204>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <HAL_GPIO_Init+0x204>
 8001282:	2300      	movs	r3, #0
 8001284:	69fa      	ldr	r2, [r7, #28]
 8001286:	f002 0203 	and.w	r2, r2, #3
 800128a:	0092      	lsls	r2, r2, #2
 800128c:	4093      	lsls	r3, r2
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001294:	4935      	ldr	r1, [pc, #212]	@ (800136c <HAL_GPIO_Init+0x2ec>)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a2:	4b38      	ldr	r3, [pc, #224]	@ (8001384 <HAL_GPIO_Init+0x304>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001384 <HAL_GPIO_Init+0x304>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001384 <HAL_GPIO_Init+0x304>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f0:	4a24      	ldr	r2, [pc, #144]	@ (8001384 <HAL_GPIO_Init+0x304>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012f6:	4b23      	ldr	r3, [pc, #140]	@ (8001384 <HAL_GPIO_Init+0x304>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800131a:	4a1a      	ldr	r2, [pc, #104]	@ (8001384 <HAL_GPIO_Init+0x304>)
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001320:	4b18      	ldr	r3, [pc, #96]	@ (8001384 <HAL_GPIO_Init+0x304>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001344:	4a0f      	ldr	r2, [pc, #60]	@ (8001384 <HAL_GPIO_Init+0x304>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3301      	adds	r3, #1
 800134e:	61fb      	str	r3, [r7, #28]
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	2b0f      	cmp	r3, #15
 8001354:	f67f aea2 	bls.w	800109c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3724      	adds	r7, #36	@ 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40013800 	.word	0x40013800
 8001370:	40020000 	.word	0x40020000
 8001374:	40020400 	.word	0x40020400
 8001378:	40020800 	.word	0x40020800
 800137c:	40020c00 	.word	0x40020c00
 8001380:	40021000 	.word	0x40021000
 8001384:	40013c00 	.word	0x40013c00

08001388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
 8001394:	4613      	mov	r3, r2
 8001396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001398:	787b      	ldrb	r3, [r7, #1]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800139e:	887a      	ldrh	r2, [r7, #2]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013a4:	e003      	b.n	80013ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013a6:	887b      	ldrh	r3, [r7, #2]
 80013a8:	041a      	lsls	r2, r3, #16
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	619a      	str	r2, [r3, #24]
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b085      	sub	sp, #20
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013cc:	887a      	ldrh	r2, [r7, #2]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4013      	ands	r3, r2
 80013d2:	041a      	lsls	r2, r3, #16
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	887b      	ldrh	r3, [r7, #2]
 80013da:	400b      	ands	r3, r1
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	619a      	str	r2, [r3, #24]
}
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013fa:	4b08      	ldr	r3, [pc, #32]	@ (800141c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013fc:	695a      	ldr	r2, [r3, #20]
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	4013      	ands	r3, r2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d006      	beq.n	8001414 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001406:	4a05      	ldr	r2, [pc, #20]	@ (800141c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f8d4 	bl	80005bc <HAL_GPIO_EXTI_Callback>
  }
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40013c00 	.word	0x40013c00

08001420 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e12b      	b.n	800168a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d106      	bne.n	800144c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff fb38 	bl	8000abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2224      	movs	r2, #36	@ 0x24
 8001450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 0201 	bic.w	r2, r2, #1
 8001462:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001472:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001482:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001484:	f001 f8da 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8001488:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	4a81      	ldr	r2, [pc, #516]	@ (8001694 <HAL_I2C_Init+0x274>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d807      	bhi.n	80014a4 <HAL_I2C_Init+0x84>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4a80      	ldr	r2, [pc, #512]	@ (8001698 <HAL_I2C_Init+0x278>)
 8001498:	4293      	cmp	r3, r2
 800149a:	bf94      	ite	ls
 800149c:	2301      	movls	r3, #1
 800149e:	2300      	movhi	r3, #0
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	e006      	b.n	80014b2 <HAL_I2C_Init+0x92>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4a7d      	ldr	r2, [pc, #500]	@ (800169c <HAL_I2C_Init+0x27c>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	bf94      	ite	ls
 80014ac:	2301      	movls	r3, #1
 80014ae:	2300      	movhi	r3, #0
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e0e7      	b.n	800168a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4a78      	ldr	r2, [pc, #480]	@ (80016a0 <HAL_I2C_Init+0x280>)
 80014be:	fba2 2303 	umull	r2, r3, r2, r3
 80014c2:	0c9b      	lsrs	r3, r3, #18
 80014c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	4a6a      	ldr	r2, [pc, #424]	@ (8001694 <HAL_I2C_Init+0x274>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d802      	bhi.n	80014f4 <HAL_I2C_Init+0xd4>
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	3301      	adds	r3, #1
 80014f2:	e009      	b.n	8001508 <HAL_I2C_Init+0xe8>
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	4a69      	ldr	r2, [pc, #420]	@ (80016a4 <HAL_I2C_Init+0x284>)
 8001500:	fba2 2303 	umull	r2, r3, r2, r3
 8001504:	099b      	lsrs	r3, r3, #6
 8001506:	3301      	adds	r3, #1
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	430b      	orrs	r3, r1
 800150e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800151a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	495c      	ldr	r1, [pc, #368]	@ (8001694 <HAL_I2C_Init+0x274>)
 8001524:	428b      	cmp	r3, r1
 8001526:	d819      	bhi.n	800155c <HAL_I2C_Init+0x13c>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1e59      	subs	r1, r3, #1
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	fbb1 f3f3 	udiv	r3, r1, r3
 8001536:	1c59      	adds	r1, r3, #1
 8001538:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800153c:	400b      	ands	r3, r1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00a      	beq.n	8001558 <HAL_I2C_Init+0x138>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	1e59      	subs	r1, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001550:	3301      	adds	r3, #1
 8001552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001556:	e051      	b.n	80015fc <HAL_I2C_Init+0x1dc>
 8001558:	2304      	movs	r3, #4
 800155a:	e04f      	b.n	80015fc <HAL_I2C_Init+0x1dc>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d111      	bne.n	8001588 <HAL_I2C_Init+0x168>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	1e58      	subs	r0, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6859      	ldr	r1, [r3, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	440b      	add	r3, r1
 8001572:	fbb0 f3f3 	udiv	r3, r0, r3
 8001576:	3301      	adds	r3, #1
 8001578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800157c:	2b00      	cmp	r3, #0
 800157e:	bf0c      	ite	eq
 8001580:	2301      	moveq	r3, #1
 8001582:	2300      	movne	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	e012      	b.n	80015ae <HAL_I2C_Init+0x18e>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	1e58      	subs	r0, r3, #1
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6859      	ldr	r1, [r3, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	0099      	lsls	r1, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	fbb0 f3f3 	udiv	r3, r0, r3
 800159e:	3301      	adds	r3, #1
 80015a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	bf0c      	ite	eq
 80015a8:	2301      	moveq	r3, #1
 80015aa:	2300      	movne	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_I2C_Init+0x196>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e022      	b.n	80015fc <HAL_I2C_Init+0x1dc>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10e      	bne.n	80015dc <HAL_I2C_Init+0x1bc>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	1e58      	subs	r0, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6859      	ldr	r1, [r3, #4]
 80015c6:	460b      	mov	r3, r1
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	440b      	add	r3, r1
 80015cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80015d0:	3301      	adds	r3, #1
 80015d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015da:	e00f      	b.n	80015fc <HAL_I2C_Init+0x1dc>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	1e58      	subs	r0, r3, #1
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6859      	ldr	r1, [r3, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	0099      	lsls	r1, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80015f2:	3301      	adds	r3, #1
 80015f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	6809      	ldr	r1, [r1, #0]
 8001600:	4313      	orrs	r3, r2
 8001602:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69da      	ldr	r2, [r3, #28]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800162a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6911      	ldr	r1, [r2, #16]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68d2      	ldr	r2, [r2, #12]
 8001636:	4311      	orrs	r1, r2
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	430b      	orrs	r3, r1
 800163e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695a      	ldr	r2, [r3, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0201 	orr.w	r2, r2, #1
 800166a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2220      	movs	r2, #32
 8001676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	000186a0 	.word	0x000186a0
 8001698:	001e847f 	.word	0x001e847f
 800169c:	003d08ff 	.word	0x003d08ff
 80016a0:	431bde83 	.word	0x431bde83
 80016a4:	10624dd3 	.word	0x10624dd3

080016a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af02      	add	r7, sp, #8
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	461a      	mov	r2, r3
 80016b4:	460b      	mov	r3, r1
 80016b6:	817b      	strh	r3, [r7, #10]
 80016b8:	4613      	mov	r3, r2
 80016ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016bc:	f7ff fb9e 	bl	8000dfc <HAL_GetTick>
 80016c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b20      	cmp	r3, #32
 80016cc:	f040 80e0 	bne.w	8001890 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2319      	movs	r3, #25
 80016d6:	2201      	movs	r2, #1
 80016d8:	4970      	ldr	r1, [pc, #448]	@ (800189c <HAL_I2C_Master_Transmit+0x1f4>)
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f000 f964 	bl	80019a8 <I2C_WaitOnFlagUntilTimeout>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80016e6:	2302      	movs	r3, #2
 80016e8:	e0d3      	b.n	8001892 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_I2C_Master_Transmit+0x50>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e0cc      	b.n	8001892 <HAL_I2C_Master_Transmit+0x1ea>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b01      	cmp	r3, #1
 800170c:	d007      	beq.n	800171e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 0201 	orr.w	r2, r2, #1
 800171c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800172c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2221      	movs	r2, #33	@ 0x21
 8001732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2210      	movs	r2, #16
 800173a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	893a      	ldrh	r2, [r7, #8]
 800174e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001754:	b29a      	uxth	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4a50      	ldr	r2, [pc, #320]	@ (80018a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800175e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001760:	8979      	ldrh	r1, [r7, #10]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	6a3a      	ldr	r2, [r7, #32]
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 f89c 	bl	80018a4 <I2C_MasterRequestWrite>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e08d      	b.n	8001892 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800178c:	e066      	b.n	800185c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	6a39      	ldr	r1, [r7, #32]
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 fa22 	bl	8001bdc <I2C_WaitOnTXEFlagUntilTimeout>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00d      	beq.n	80017ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d107      	bne.n	80017b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e06b      	b.n	8001892 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017be:	781a      	ldrb	r2, [r3, #0]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	3b01      	subs	r3, #1
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e2:	3b01      	subs	r3, #1
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	d11b      	bne.n	8001830 <HAL_I2C_Master_Transmit+0x188>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d017      	beq.n	8001830 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001804:	781a      	ldrb	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001810:	1c5a      	adds	r2, r3, #1
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800181a:	b29b      	uxth	r3, r3
 800181c:	3b01      	subs	r3, #1
 800181e:	b29a      	uxth	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001828:	3b01      	subs	r3, #1
 800182a:	b29a      	uxth	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	6a39      	ldr	r1, [r7, #32]
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f000 fa19 	bl	8001c6c <I2C_WaitOnBTFFlagUntilTimeout>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00d      	beq.n	800185c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001844:	2b04      	cmp	r3, #4
 8001846:	d107      	bne.n	8001858 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001856:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e01a      	b.n	8001892 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001860:	2b00      	cmp	r3, #0
 8001862:	d194      	bne.n	800178e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001872:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2220      	movs	r2, #32
 8001878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800188c:	2300      	movs	r3, #0
 800188e:	e000      	b.n	8001892 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001890:	2302      	movs	r3, #2
  }
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	00100002 	.word	0x00100002
 80018a0:	ffff0000 	.word	0xffff0000

080018a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af02      	add	r7, sp, #8
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	460b      	mov	r3, r1
 80018b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d006      	beq.n	80018ce <I2C_MasterRequestWrite+0x2a>
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d003      	beq.n	80018ce <I2C_MasterRequestWrite+0x2a>
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80018cc:	d108      	bne.n	80018e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	e00b      	b.n	80018f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e4:	2b12      	cmp	r3, #18
 80018e6:	d107      	bne.n	80018f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 f84f 	bl	80019a8 <I2C_WaitOnFlagUntilTimeout>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00d      	beq.n	800192c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800191a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800191e:	d103      	bne.n	8001928 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001926:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e035      	b.n	8001998 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001934:	d108      	bne.n	8001948 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001936:	897b      	ldrh	r3, [r7, #10]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	461a      	mov	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001944:	611a      	str	r2, [r3, #16]
 8001946:	e01b      	b.n	8001980 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001948:	897b      	ldrh	r3, [r7, #10]
 800194a:	11db      	asrs	r3, r3, #7
 800194c:	b2db      	uxtb	r3, r3
 800194e:	f003 0306 	and.w	r3, r3, #6
 8001952:	b2db      	uxtb	r3, r3
 8001954:	f063 030f 	orn	r3, r3, #15
 8001958:	b2da      	uxtb	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	490e      	ldr	r1, [pc, #56]	@ (80019a0 <I2C_MasterRequestWrite+0xfc>)
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 f898 	bl	8001a9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e010      	b.n	8001998 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001976:	897b      	ldrh	r3, [r7, #10]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	4907      	ldr	r1, [pc, #28]	@ (80019a4 <I2C_MasterRequestWrite+0x100>)
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 f888 	bl	8001a9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	00010008 	.word	0x00010008
 80019a4:	00010002 	.word	0x00010002

080019a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	4613      	mov	r3, r2
 80019b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019b8:	e048      	b.n	8001a4c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d044      	beq.n	8001a4c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019c2:	f7ff fa1b 	bl	8000dfc <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d302      	bcc.n	80019d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d139      	bne.n	8001a4c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	0c1b      	lsrs	r3, r3, #16
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d10d      	bne.n	80019fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	43da      	mvns	r2, r3
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	4013      	ands	r3, r2
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf0c      	ite	eq
 80019f4:	2301      	moveq	r3, #1
 80019f6:	2300      	movne	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	461a      	mov	r2, r3
 80019fc:	e00c      	b.n	8001a18 <I2C_WaitOnFlagUntilTimeout+0x70>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	43da      	mvns	r2, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	bf0c      	ite	eq
 8001a10:	2301      	moveq	r3, #1
 8001a12:	2300      	movne	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d116      	bne.n	8001a4c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2220      	movs	r2, #32
 8001a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a38:	f043 0220 	orr.w	r2, r3, #32
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e023      	b.n	8001a94 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	0c1b      	lsrs	r3, r3, #16
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d10d      	bne.n	8001a72 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	43da      	mvns	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	4013      	ands	r3, r2
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	bf0c      	ite	eq
 8001a68:	2301      	moveq	r3, #1
 8001a6a:	2300      	movne	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	e00c      	b.n	8001a8c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	43da      	mvns	r2, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bf0c      	ite	eq
 8001a84:	2301      	moveq	r3, #1
 8001a86:	2300      	movne	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d093      	beq.n	80019ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001aaa:	e071      	b.n	8001b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aba:	d123      	bne.n	8001b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001aca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ad4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2220      	movs	r2, #32
 8001ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af0:	f043 0204 	orr.w	r2, r3, #4
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e067      	b.n	8001bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0a:	d041      	beq.n	8001b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b0c:	f7ff f976 	bl	8000dfc <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d302      	bcc.n	8001b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d136      	bne.n	8001b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	0c1b      	lsrs	r3, r3, #16
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d10c      	bne.n	8001b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	43da      	mvns	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	4013      	ands	r3, r2
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	bf14      	ite	ne
 8001b3e:	2301      	movne	r3, #1
 8001b40:	2300      	moveq	r3, #0
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	e00b      	b.n	8001b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	43da      	mvns	r2, r3
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	4013      	ands	r3, r2
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf14      	ite	ne
 8001b58:	2301      	movne	r3, #1
 8001b5a:	2300      	moveq	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d016      	beq.n	8001b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7c:	f043 0220 	orr.w	r2, r3, #32
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e021      	b.n	8001bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	0c1b      	lsrs	r3, r3, #16
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d10c      	bne.n	8001bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	43da      	mvns	r2, r3
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	bf14      	ite	ne
 8001bac:	2301      	movne	r3, #1
 8001bae:	2300      	moveq	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	e00b      	b.n	8001bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	bf14      	ite	ne
 8001bc6:	2301      	movne	r3, #1
 8001bc8:	2300      	moveq	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f47f af6d 	bne.w	8001aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001be8:	e034      	b.n	8001c54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 f886 	bl	8001cfc <I2C_IsAcknowledgeFailed>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e034      	b.n	8001c64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c00:	d028      	beq.n	8001c54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c02:	f7ff f8fb 	bl	8000dfc <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d302      	bcc.n	8001c18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d11d      	bne.n	8001c54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c22:	2b80      	cmp	r3, #128	@ 0x80
 8001c24:	d016      	beq.n	8001c54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c40:	f043 0220 	orr.w	r2, r3, #32
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e007      	b.n	8001c64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c5e:	2b80      	cmp	r3, #128	@ 0x80
 8001c60:	d1c3      	bne.n	8001bea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c78:	e034      	b.n	8001ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 f83e 	bl	8001cfc <I2C_IsAcknowledgeFailed>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e034      	b.n	8001cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c90:	d028      	beq.n	8001ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c92:	f7ff f8b3 	bl	8000dfc <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d302      	bcc.n	8001ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d11d      	bne.n	8001ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d016      	beq.n	8001ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd0:	f043 0220 	orr.w	r2, r3, #32
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e007      	b.n	8001cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d1c3      	bne.n	8001c7a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d12:	d11b      	bne.n	8001d4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2220      	movs	r2, #32
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d38:	f043 0204 	orr.w	r2, r3, #4
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e267      	b.n	800223e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d075      	beq.n	8001e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d7a:	4b88      	ldr	r3, [pc, #544]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d00c      	beq.n	8001da0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d86:	4b85      	ldr	r3, [pc, #532]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d112      	bne.n	8001db8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d92:	4b82      	ldr	r3, [pc, #520]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d9e:	d10b      	bne.n	8001db8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	4b7e      	ldr	r3, [pc, #504]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d05b      	beq.n	8001e64 <HAL_RCC_OscConfig+0x108>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d157      	bne.n	8001e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e242      	b.n	800223e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dc0:	d106      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x74>
 8001dc2:	4b76      	ldr	r3, [pc, #472]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a75      	ldr	r2, [pc, #468]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e01d      	b.n	8001e0c <HAL_RCC_OscConfig+0xb0>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dd8:	d10c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x98>
 8001dda:	4b70      	ldr	r3, [pc, #448]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a6f      	ldr	r2, [pc, #444]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001de0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	4b6d      	ldr	r3, [pc, #436]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a6c      	ldr	r2, [pc, #432]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	e00b      	b.n	8001e0c <HAL_RCC_OscConfig+0xb0>
 8001df4:	4b69      	ldr	r3, [pc, #420]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a68      	ldr	r2, [pc, #416]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001dfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	4b66      	ldr	r3, [pc, #408]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a65      	ldr	r2, [pc, #404]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001e06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d013      	beq.n	8001e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7fe fff2 	bl	8000dfc <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7fe ffee 	bl	8000dfc <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	@ 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e207      	b.n	800223e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	4b5b      	ldr	r3, [pc, #364]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0xc0>
 8001e3a:	e014      	b.n	8001e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7fe ffde 	bl	8000dfc <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e44:	f7fe ffda 	bl	8000dfc <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	@ 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e1f3      	b.n	800223e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e56:	4b51      	ldr	r3, [pc, #324]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0xe8>
 8001e62:	e000      	b.n	8001e66 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d063      	beq.n	8001f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e72:	4b4a      	ldr	r3, [pc, #296]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00b      	beq.n	8001e96 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e7e:	4b47      	ldr	r3, [pc, #284]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d11c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e8a:	4b44      	ldr	r3, [pc, #272]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d116      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e96:	4b41      	ldr	r3, [pc, #260]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d005      	beq.n	8001eae <HAL_RCC_OscConfig+0x152>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d001      	beq.n	8001eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e1c7      	b.n	800223e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eae:	4b3b      	ldr	r3, [pc, #236]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4937      	ldr	r1, [pc, #220]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec2:	e03a      	b.n	8001f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d020      	beq.n	8001f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ecc:	4b34      	ldr	r3, [pc, #208]	@ (8001fa0 <HAL_RCC_OscConfig+0x244>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed2:	f7fe ff93 	bl	8000dfc <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eda:	f7fe ff8f 	bl	8000dfc <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e1a8      	b.n	800223e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eec:	4b2b      	ldr	r3, [pc, #172]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef8:	4b28      	ldr	r3, [pc, #160]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4925      	ldr	r1, [pc, #148]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	600b      	str	r3, [r1, #0]
 8001f0c:	e015      	b.n	8001f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f0e:	4b24      	ldr	r3, [pc, #144]	@ (8001fa0 <HAL_RCC_OscConfig+0x244>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7fe ff72 	bl	8000dfc <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1c:	f7fe ff6e 	bl	8000dfc <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e187      	b.n	800223e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d036      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d016      	beq.n	8001f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4e:	4b15      	ldr	r3, [pc, #84]	@ (8001fa4 <HAL_RCC_OscConfig+0x248>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f54:	f7fe ff52 	bl	8000dfc <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5c:	f7fe ff4e 	bl	8000dfc <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e167      	b.n	800223e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f9c <HAL_RCC_OscConfig+0x240>)
 8001f70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0x200>
 8001f7a:	e01b      	b.n	8001fb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f7c:	4b09      	ldr	r3, [pc, #36]	@ (8001fa4 <HAL_RCC_OscConfig+0x248>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f82:	f7fe ff3b 	bl	8000dfc <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f88:	e00e      	b.n	8001fa8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f8a:	f7fe ff37 	bl	8000dfc <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d907      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e150      	b.n	800223e <HAL_RCC_OscConfig+0x4e2>
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	42470000 	.word	0x42470000
 8001fa4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa8:	4b88      	ldr	r3, [pc, #544]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 8001faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1ea      	bne.n	8001f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 8097 	beq.w	80020f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc6:	4b81      	ldr	r3, [pc, #516]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10f      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	4b7d      	ldr	r3, [pc, #500]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	4a7c      	ldr	r2, [pc, #496]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 8001fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fe0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe2:	4b7a      	ldr	r3, [pc, #488]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff2:	4b77      	ldr	r3, [pc, #476]	@ (80021d0 <HAL_RCC_OscConfig+0x474>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d118      	bne.n	8002030 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ffe:	4b74      	ldr	r3, [pc, #464]	@ (80021d0 <HAL_RCC_OscConfig+0x474>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a73      	ldr	r2, [pc, #460]	@ (80021d0 <HAL_RCC_OscConfig+0x474>)
 8002004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800200a:	f7fe fef7 	bl	8000dfc <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002012:	f7fe fef3 	bl	8000dfc <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e10c      	b.n	800223e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002024:	4b6a      	ldr	r3, [pc, #424]	@ (80021d0 <HAL_RCC_OscConfig+0x474>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d106      	bne.n	8002046 <HAL_RCC_OscConfig+0x2ea>
 8002038:	4b64      	ldr	r3, [pc, #400]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 800203a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203c:	4a63      	ldr	r2, [pc, #396]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6713      	str	r3, [r2, #112]	@ 0x70
 8002044:	e01c      	b.n	8002080 <HAL_RCC_OscConfig+0x324>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b05      	cmp	r3, #5
 800204c:	d10c      	bne.n	8002068 <HAL_RCC_OscConfig+0x30c>
 800204e:	4b5f      	ldr	r3, [pc, #380]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002052:	4a5e      	ldr	r2, [pc, #376]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 8002054:	f043 0304 	orr.w	r3, r3, #4
 8002058:	6713      	str	r3, [r2, #112]	@ 0x70
 800205a:	4b5c      	ldr	r3, [pc, #368]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 800205c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800205e:	4a5b      	ldr	r2, [pc, #364]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6713      	str	r3, [r2, #112]	@ 0x70
 8002066:	e00b      	b.n	8002080 <HAL_RCC_OscConfig+0x324>
 8002068:	4b58      	ldr	r3, [pc, #352]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 800206a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800206c:	4a57      	ldr	r2, [pc, #348]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 800206e:	f023 0301 	bic.w	r3, r3, #1
 8002072:	6713      	str	r3, [r2, #112]	@ 0x70
 8002074:	4b55      	ldr	r3, [pc, #340]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 8002076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002078:	4a54      	ldr	r2, [pc, #336]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 800207a:	f023 0304 	bic.w	r3, r3, #4
 800207e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d015      	beq.n	80020b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002088:	f7fe feb8 	bl	8000dfc <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002090:	f7fe feb4 	bl	8000dfc <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e0cb      	b.n	800223e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a6:	4b49      	ldr	r3, [pc, #292]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 80020a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0ee      	beq.n	8002090 <HAL_RCC_OscConfig+0x334>
 80020b2:	e014      	b.n	80020de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b4:	f7fe fea2 	bl	8000dfc <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ba:	e00a      	b.n	80020d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020bc:	f7fe fe9e 	bl	8000dfc <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e0b5      	b.n	800223e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d2:	4b3e      	ldr	r3, [pc, #248]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 80020d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1ee      	bne.n	80020bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020de:	7dfb      	ldrb	r3, [r7, #23]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d105      	bne.n	80020f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e4:	4b39      	ldr	r3, [pc, #228]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	4a38      	ldr	r2, [pc, #224]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 80020ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80a1 	beq.w	800223c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020fa:	4b34      	ldr	r3, [pc, #208]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b08      	cmp	r3, #8
 8002104:	d05c      	beq.n	80021c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d141      	bne.n	8002192 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210e:	4b31      	ldr	r3, [pc, #196]	@ (80021d4 <HAL_RCC_OscConfig+0x478>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7fe fe72 	bl	8000dfc <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211c:	f7fe fe6e 	bl	8000dfc <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e087      	b.n	800223e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212e:	4b27      	ldr	r3, [pc, #156]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69da      	ldr	r2, [r3, #28]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002148:	019b      	lsls	r3, r3, #6
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	3b01      	subs	r3, #1
 8002154:	041b      	lsls	r3, r3, #16
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215c:	061b      	lsls	r3, r3, #24
 800215e:	491b      	ldr	r1, [pc, #108]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 8002160:	4313      	orrs	r3, r2
 8002162:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002164:	4b1b      	ldr	r3, [pc, #108]	@ (80021d4 <HAL_RCC_OscConfig+0x478>)
 8002166:	2201      	movs	r2, #1
 8002168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216a:	f7fe fe47 	bl	8000dfc <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002172:	f7fe fe43 	bl	8000dfc <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e05c      	b.n	800223e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002184:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x416>
 8002190:	e054      	b.n	800223c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002192:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <HAL_RCC_OscConfig+0x478>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7fe fe30 	bl	8000dfc <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a0:	f7fe fe2c 	bl	8000dfc <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e045      	b.n	800223e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b2:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <HAL_RCC_OscConfig+0x470>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x444>
 80021be:	e03d      	b.n	800223c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d107      	bne.n	80021d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e038      	b.n	800223e <HAL_RCC_OscConfig+0x4e2>
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40007000 	.word	0x40007000
 80021d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002248 <HAL_RCC_OscConfig+0x4ec>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d028      	beq.n	8002238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d121      	bne.n	8002238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fe:	429a      	cmp	r2, r3
 8002200:	d11a      	bne.n	8002238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002208:	4013      	ands	r3, r2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800220e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002210:	4293      	cmp	r3, r2
 8002212:	d111      	bne.n	8002238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221e:	085b      	lsrs	r3, r3, #1
 8002220:	3b01      	subs	r3, #1
 8002222:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002224:	429a      	cmp	r2, r3
 8002226:	d107      	bne.n	8002238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002232:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e000      	b.n	800223e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800

0800224c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0cc      	b.n	80023fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002260:	4b68      	ldr	r3, [pc, #416]	@ (8002404 <HAL_RCC_ClockConfig+0x1b8>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d90c      	bls.n	8002288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b65      	ldr	r3, [pc, #404]	@ (8002404 <HAL_RCC_ClockConfig+0x1b8>)
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002276:	4b63      	ldr	r3, [pc, #396]	@ (8002404 <HAL_RCC_ClockConfig+0x1b8>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d001      	beq.n	8002288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0b8      	b.n	80023fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d020      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	d005      	beq.n	80022ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022a0:	4b59      	ldr	r3, [pc, #356]	@ (8002408 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	4a58      	ldr	r2, [pc, #352]	@ (8002408 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022b8:	4b53      	ldr	r3, [pc, #332]	@ (8002408 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	4a52      	ldr	r2, [pc, #328]	@ (8002408 <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c4:	4b50      	ldr	r3, [pc, #320]	@ (8002408 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	494d      	ldr	r1, [pc, #308]	@ (8002408 <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d044      	beq.n	800236c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d107      	bne.n	80022fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ea:	4b47      	ldr	r3, [pc, #284]	@ (8002408 <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d119      	bne.n	800232a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e07f      	b.n	80023fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d003      	beq.n	800230a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002306:	2b03      	cmp	r3, #3
 8002308:	d107      	bne.n	800231a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230a:	4b3f      	ldr	r3, [pc, #252]	@ (8002408 <HAL_RCC_ClockConfig+0x1bc>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d109      	bne.n	800232a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e06f      	b.n	80023fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231a:	4b3b      	ldr	r3, [pc, #236]	@ (8002408 <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e067      	b.n	80023fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800232a:	4b37      	ldr	r3, [pc, #220]	@ (8002408 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f023 0203 	bic.w	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4934      	ldr	r1, [pc, #208]	@ (8002408 <HAL_RCC_ClockConfig+0x1bc>)
 8002338:	4313      	orrs	r3, r2
 800233a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800233c:	f7fe fd5e 	bl	8000dfc <HAL_GetTick>
 8002340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002342:	e00a      	b.n	800235a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002344:	f7fe fd5a 	bl	8000dfc <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e04f      	b.n	80023fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235a:	4b2b      	ldr	r3, [pc, #172]	@ (8002408 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 020c 	and.w	r2, r3, #12
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	429a      	cmp	r2, r3
 800236a:	d1eb      	bne.n	8002344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800236c:	4b25      	ldr	r3, [pc, #148]	@ (8002404 <HAL_RCC_ClockConfig+0x1b8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d20c      	bcs.n	8002394 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b22      	ldr	r3, [pc, #136]	@ (8002404 <HAL_RCC_ClockConfig+0x1b8>)
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b20      	ldr	r3, [pc, #128]	@ (8002404 <HAL_RCC_ClockConfig+0x1b8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e032      	b.n	80023fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a0:	4b19      	ldr	r3, [pc, #100]	@ (8002408 <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4916      	ldr	r1, [pc, #88]	@ (8002408 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d009      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023be:	4b12      	ldr	r3, [pc, #72]	@ (8002408 <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	490e      	ldr	r1, [pc, #56]	@ (8002408 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023d2:	f000 f821 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 80023d6:	4602      	mov	r2, r0
 80023d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002408 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	490a      	ldr	r1, [pc, #40]	@ (800240c <HAL_RCC_ClockConfig+0x1c0>)
 80023e4:	5ccb      	ldrb	r3, [r1, r3]
 80023e6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ea:	4a09      	ldr	r2, [pc, #36]	@ (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80023ee:	4b09      	ldr	r3, [pc, #36]	@ (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe fcbe 	bl	8000d74 <HAL_InitTick>

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40023c00 	.word	0x40023c00
 8002408:	40023800 	.word	0x40023800
 800240c:	080038e0 	.word	0x080038e0
 8002410:	20000000 	.word	0x20000000
 8002414:	20000004 	.word	0x20000004

08002418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800241c:	b094      	sub	sp, #80	@ 0x50
 800241e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002430:	4b79      	ldr	r3, [pc, #484]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x200>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b08      	cmp	r3, #8
 800243a:	d00d      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0x40>
 800243c:	2b08      	cmp	r3, #8
 800243e:	f200 80e1 	bhi.w	8002604 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0x34>
 8002446:	2b04      	cmp	r3, #4
 8002448:	d003      	beq.n	8002452 <HAL_RCC_GetSysClockFreq+0x3a>
 800244a:	e0db      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800244c:	4b73      	ldr	r3, [pc, #460]	@ (800261c <HAL_RCC_GetSysClockFreq+0x204>)
 800244e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002450:	e0db      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002452:	4b73      	ldr	r3, [pc, #460]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x208>)
 8002454:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002456:	e0d8      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002458:	4b6f      	ldr	r3, [pc, #444]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x200>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002460:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002462:	4b6d      	ldr	r3, [pc, #436]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x200>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d063      	beq.n	8002536 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800246e:	4b6a      	ldr	r3, [pc, #424]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x200>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	099b      	lsrs	r3, r3, #6
 8002474:	2200      	movs	r2, #0
 8002476:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002478:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800247a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800247c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002480:	633b      	str	r3, [r7, #48]	@ 0x30
 8002482:	2300      	movs	r3, #0
 8002484:	637b      	str	r3, [r7, #52]	@ 0x34
 8002486:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800248a:	4622      	mov	r2, r4
 800248c:	462b      	mov	r3, r5
 800248e:	f04f 0000 	mov.w	r0, #0
 8002492:	f04f 0100 	mov.w	r1, #0
 8002496:	0159      	lsls	r1, r3, #5
 8002498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800249c:	0150      	lsls	r0, r2, #5
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4621      	mov	r1, r4
 80024a4:	1a51      	subs	r1, r2, r1
 80024a6:	6139      	str	r1, [r7, #16]
 80024a8:	4629      	mov	r1, r5
 80024aa:	eb63 0301 	sbc.w	r3, r3, r1
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024bc:	4659      	mov	r1, fp
 80024be:	018b      	lsls	r3, r1, #6
 80024c0:	4651      	mov	r1, sl
 80024c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024c6:	4651      	mov	r1, sl
 80024c8:	018a      	lsls	r2, r1, #6
 80024ca:	4651      	mov	r1, sl
 80024cc:	ebb2 0801 	subs.w	r8, r2, r1
 80024d0:	4659      	mov	r1, fp
 80024d2:	eb63 0901 	sbc.w	r9, r3, r1
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024ea:	4690      	mov	r8, r2
 80024ec:	4699      	mov	r9, r3
 80024ee:	4623      	mov	r3, r4
 80024f0:	eb18 0303 	adds.w	r3, r8, r3
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	462b      	mov	r3, r5
 80024f8:	eb49 0303 	adc.w	r3, r9, r3
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	f04f 0300 	mov.w	r3, #0
 8002506:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800250a:	4629      	mov	r1, r5
 800250c:	024b      	lsls	r3, r1, #9
 800250e:	4621      	mov	r1, r4
 8002510:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002514:	4621      	mov	r1, r4
 8002516:	024a      	lsls	r2, r1, #9
 8002518:	4610      	mov	r0, r2
 800251a:	4619      	mov	r1, r3
 800251c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800251e:	2200      	movs	r2, #0
 8002520:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002522:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002524:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002528:	f7fd feb2 	bl	8000290 <__aeabi_uldivmod>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4613      	mov	r3, r2
 8002532:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002534:	e058      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002536:	4b38      	ldr	r3, [pc, #224]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x200>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	099b      	lsrs	r3, r3, #6
 800253c:	2200      	movs	r2, #0
 800253e:	4618      	mov	r0, r3
 8002540:	4611      	mov	r1, r2
 8002542:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002546:	623b      	str	r3, [r7, #32]
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	@ 0x24
 800254c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002550:	4642      	mov	r2, r8
 8002552:	464b      	mov	r3, r9
 8002554:	f04f 0000 	mov.w	r0, #0
 8002558:	f04f 0100 	mov.w	r1, #0
 800255c:	0159      	lsls	r1, r3, #5
 800255e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002562:	0150      	lsls	r0, r2, #5
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4641      	mov	r1, r8
 800256a:	ebb2 0a01 	subs.w	sl, r2, r1
 800256e:	4649      	mov	r1, r9
 8002570:	eb63 0b01 	sbc.w	fp, r3, r1
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002580:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002584:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002588:	ebb2 040a 	subs.w	r4, r2, sl
 800258c:	eb63 050b 	sbc.w	r5, r3, fp
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	00eb      	lsls	r3, r5, #3
 800259a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800259e:	00e2      	lsls	r2, r4, #3
 80025a0:	4614      	mov	r4, r2
 80025a2:	461d      	mov	r5, r3
 80025a4:	4643      	mov	r3, r8
 80025a6:	18e3      	adds	r3, r4, r3
 80025a8:	603b      	str	r3, [r7, #0]
 80025aa:	464b      	mov	r3, r9
 80025ac:	eb45 0303 	adc.w	r3, r5, r3
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025be:	4629      	mov	r1, r5
 80025c0:	028b      	lsls	r3, r1, #10
 80025c2:	4621      	mov	r1, r4
 80025c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025c8:	4621      	mov	r1, r4
 80025ca:	028a      	lsls	r2, r1, #10
 80025cc:	4610      	mov	r0, r2
 80025ce:	4619      	mov	r1, r3
 80025d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025d2:	2200      	movs	r2, #0
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	61fa      	str	r2, [r7, #28]
 80025d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025dc:	f7fd fe58 	bl	8000290 <__aeabi_uldivmod>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4613      	mov	r3, r2
 80025e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80025e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	0c1b      	lsrs	r3, r3, #16
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	3301      	adds	r3, #1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80025f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002602:	e002      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002604:	4b05      	ldr	r3, [pc, #20]	@ (800261c <HAL_RCC_GetSysClockFreq+0x204>)
 8002606:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800260a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800260c:	4618      	mov	r0, r3
 800260e:	3750      	adds	r7, #80	@ 0x50
 8002610:	46bd      	mov	sp, r7
 8002612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002616:	bf00      	nop
 8002618:	40023800 	.word	0x40023800
 800261c:	00f42400 	.word	0x00f42400
 8002620:	007a1200 	.word	0x007a1200

08002624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002628:	4b03      	ldr	r3, [pc, #12]	@ (8002638 <HAL_RCC_GetHCLKFreq+0x14>)
 800262a:	681b      	ldr	r3, [r3, #0]
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000000 	.word	0x20000000

0800263c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002640:	f7ff fff0 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002644:	4602      	mov	r2, r0
 8002646:	4b05      	ldr	r3, [pc, #20]	@ (800265c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	0a9b      	lsrs	r3, r3, #10
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	4903      	ldr	r1, [pc, #12]	@ (8002660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002652:	5ccb      	ldrb	r3, [r1, r3]
 8002654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002658:	4618      	mov	r0, r3
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40023800 	.word	0x40023800
 8002660:	080038f0 	.word	0x080038f0

08002664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002668:	f7ff ffdc 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 800266c:	4602      	mov	r2, r0
 800266e:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	0b5b      	lsrs	r3, r3, #13
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	4903      	ldr	r1, [pc, #12]	@ (8002688 <HAL_RCC_GetPCLK2Freq+0x24>)
 800267a:	5ccb      	ldrb	r3, [r1, r3]
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002680:	4618      	mov	r0, r3
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40023800 	.word	0x40023800
 8002688:	080038f0 	.word	0x080038f0

0800268c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e042      	b.n	8002724 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe fa4a 	bl	8000b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2224      	movs	r2, #36	@ 0x24
 80026bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f973 	bl	80029bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002704:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08a      	sub	sp, #40	@ 0x28
 8002730:	af02      	add	r7, sp, #8
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	4613      	mov	r3, r2
 800273a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b20      	cmp	r3, #32
 800274a:	d175      	bne.n	8002838 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <HAL_UART_Transmit+0x2c>
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e06e      	b.n	800283a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2221      	movs	r2, #33	@ 0x21
 8002766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800276a:	f7fe fb47 	bl	8000dfc <HAL_GetTick>
 800276e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	88fa      	ldrh	r2, [r7, #6]
 8002774:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	88fa      	ldrh	r2, [r7, #6]
 800277a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002784:	d108      	bne.n	8002798 <HAL_UART_Transmit+0x6c>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d104      	bne.n	8002798 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	e003      	b.n	80027a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800279c:	2300      	movs	r3, #0
 800279e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027a0:	e02e      	b.n	8002800 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2200      	movs	r2, #0
 80027aa:	2180      	movs	r1, #128	@ 0x80
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 f848 	bl	8002842 <UART_WaitOnFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e03a      	b.n	800283a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10b      	bne.n	80027e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	3302      	adds	r3, #2
 80027de:	61bb      	str	r3, [r7, #24]
 80027e0:	e007      	b.n	80027f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	781a      	ldrb	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	3301      	adds	r3, #1
 80027f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1cb      	bne.n	80027a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2200      	movs	r2, #0
 8002812:	2140      	movs	r1, #64	@ 0x40
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 f814 	bl	8002842 <UART_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e006      	b.n	800283a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	e000      	b.n	800283a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002838:	2302      	movs	r3, #2
  }
}
 800283a:	4618      	mov	r0, r3
 800283c:	3720      	adds	r7, #32
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b086      	sub	sp, #24
 8002846:	af00      	add	r7, sp, #0
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	603b      	str	r3, [r7, #0]
 800284e:	4613      	mov	r3, r2
 8002850:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002852:	e03b      	b.n	80028cc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285a:	d037      	beq.n	80028cc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285c:	f7fe face 	bl	8000dfc <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	6a3a      	ldr	r2, [r7, #32]
 8002868:	429a      	cmp	r2, r3
 800286a:	d302      	bcc.n	8002872 <UART_WaitOnFlagUntilTimeout+0x30>
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e03a      	b.n	80028ec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d023      	beq.n	80028cc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b80      	cmp	r3, #128	@ 0x80
 8002888:	d020      	beq.n	80028cc <UART_WaitOnFlagUntilTimeout+0x8a>
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b40      	cmp	r3, #64	@ 0x40
 800288e:	d01d      	beq.n	80028cc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b08      	cmp	r3, #8
 800289c:	d116      	bne.n	80028cc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f81d 	bl	80028f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2208      	movs	r2, #8
 80028be:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e00f      	b.n	80028ec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	4013      	ands	r3, r2
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	429a      	cmp	r2, r3
 80028da:	bf0c      	ite	eq
 80028dc:	2301      	moveq	r3, #1
 80028de:	2300      	movne	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d0b4      	beq.n	8002854 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b095      	sub	sp, #84	@ 0x54
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	330c      	adds	r3, #12
 8002902:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002906:	e853 3f00 	ldrex	r3, [r3]
 800290a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800290c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	330c      	adds	r3, #12
 800291a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800291c:	643a      	str	r2, [r7, #64]	@ 0x40
 800291e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002920:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002922:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002924:	e841 2300 	strex	r3, r2, [r1]
 8002928:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800292a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1e5      	bne.n	80028fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	3314      	adds	r3, #20
 8002936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	e853 3f00 	ldrex	r3, [r3]
 800293e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f023 0301 	bic.w	r3, r3, #1
 8002946:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	3314      	adds	r3, #20
 800294e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002950:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002952:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002954:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002958:	e841 2300 	strex	r3, r2, [r1]
 800295c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1e5      	bne.n	8002930 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002968:	2b01      	cmp	r3, #1
 800296a:	d119      	bne.n	80029a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	330c      	adds	r3, #12
 8002972:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	e853 3f00 	ldrex	r3, [r3]
 800297a:	60bb      	str	r3, [r7, #8]
   return(result);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	f023 0310 	bic.w	r3, r3, #16
 8002982:	647b      	str	r3, [r7, #68]	@ 0x44
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	330c      	adds	r3, #12
 800298a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800298c:	61ba      	str	r2, [r7, #24]
 800298e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002990:	6979      	ldr	r1, [r7, #20]
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	e841 2300 	strex	r3, r2, [r1]
 8002998:	613b      	str	r3, [r7, #16]
   return(result);
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1e5      	bne.n	800296c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80029ae:	bf00      	nop
 80029b0:	3754      	adds	r7, #84	@ 0x54
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c0:	b0c0      	sub	sp, #256	@ 0x100
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80029d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d8:	68d9      	ldr	r1, [r3, #12]
 80029da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	ea40 0301 	orr.w	r3, r0, r1
 80029e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a14:	f021 010c 	bic.w	r1, r1, #12
 8002a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a22:	430b      	orrs	r3, r1
 8002a24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a36:	6999      	ldr	r1, [r3, #24]
 8002a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	ea40 0301 	orr.w	r3, r0, r1
 8002a42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	4b8f      	ldr	r3, [pc, #572]	@ (8002c88 <UART_SetConfig+0x2cc>)
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d005      	beq.n	8002a5c <UART_SetConfig+0xa0>
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4b8d      	ldr	r3, [pc, #564]	@ (8002c8c <UART_SetConfig+0x2d0>)
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d104      	bne.n	8002a66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a5c:	f7ff fe02 	bl	8002664 <HAL_RCC_GetPCLK2Freq>
 8002a60:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002a64:	e003      	b.n	8002a6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a66:	f7ff fde9 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8002a6a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a78:	f040 810c 	bne.w	8002c94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a80:	2200      	movs	r2, #0
 8002a82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a86:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a8e:	4622      	mov	r2, r4
 8002a90:	462b      	mov	r3, r5
 8002a92:	1891      	adds	r1, r2, r2
 8002a94:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a96:	415b      	adcs	r3, r3
 8002a98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	eb12 0801 	adds.w	r8, r2, r1
 8002aa4:	4629      	mov	r1, r5
 8002aa6:	eb43 0901 	adc.w	r9, r3, r1
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ab6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002abe:	4690      	mov	r8, r2
 8002ac0:	4699      	mov	r9, r3
 8002ac2:	4623      	mov	r3, r4
 8002ac4:	eb18 0303 	adds.w	r3, r8, r3
 8002ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002acc:	462b      	mov	r3, r5
 8002ace:	eb49 0303 	adc.w	r3, r9, r3
 8002ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002ae2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002ae6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002aea:	460b      	mov	r3, r1
 8002aec:	18db      	adds	r3, r3, r3
 8002aee:	653b      	str	r3, [r7, #80]	@ 0x50
 8002af0:	4613      	mov	r3, r2
 8002af2:	eb42 0303 	adc.w	r3, r2, r3
 8002af6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002af8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002afc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b00:	f7fd fbc6 	bl	8000290 <__aeabi_uldivmod>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4b61      	ldr	r3, [pc, #388]	@ (8002c90 <UART_SetConfig+0x2d4>)
 8002b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	011c      	lsls	r4, r3, #4
 8002b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b16:	2200      	movs	r2, #0
 8002b18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b1c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002b20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b24:	4642      	mov	r2, r8
 8002b26:	464b      	mov	r3, r9
 8002b28:	1891      	adds	r1, r2, r2
 8002b2a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b2c:	415b      	adcs	r3, r3
 8002b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b34:	4641      	mov	r1, r8
 8002b36:	eb12 0a01 	adds.w	sl, r2, r1
 8002b3a:	4649      	mov	r1, r9
 8002b3c:	eb43 0b01 	adc.w	fp, r3, r1
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b54:	4692      	mov	sl, r2
 8002b56:	469b      	mov	fp, r3
 8002b58:	4643      	mov	r3, r8
 8002b5a:	eb1a 0303 	adds.w	r3, sl, r3
 8002b5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b62:	464b      	mov	r3, r9
 8002b64:	eb4b 0303 	adc.w	r3, fp, r3
 8002b68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b78:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b80:	460b      	mov	r3, r1
 8002b82:	18db      	adds	r3, r3, r3
 8002b84:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b86:	4613      	mov	r3, r2
 8002b88:	eb42 0303 	adc.w	r3, r2, r3
 8002b8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b96:	f7fd fb7b 	bl	8000290 <__aeabi_uldivmod>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8002c90 <UART_SetConfig+0x2d4>)
 8002ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	2264      	movs	r2, #100	@ 0x64
 8002baa:	fb02 f303 	mul.w	r3, r2, r3
 8002bae:	1acb      	subs	r3, r1, r3
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002bb6:	4b36      	ldr	r3, [pc, #216]	@ (8002c90 <UART_SetConfig+0x2d4>)
 8002bb8:	fba3 2302 	umull	r2, r3, r3, r2
 8002bbc:	095b      	lsrs	r3, r3, #5
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002bc4:	441c      	add	r4, r3
 8002bc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bd0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002bd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002bd8:	4642      	mov	r2, r8
 8002bda:	464b      	mov	r3, r9
 8002bdc:	1891      	adds	r1, r2, r2
 8002bde:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002be0:	415b      	adcs	r3, r3
 8002be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002be4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002be8:	4641      	mov	r1, r8
 8002bea:	1851      	adds	r1, r2, r1
 8002bec:	6339      	str	r1, [r7, #48]	@ 0x30
 8002bee:	4649      	mov	r1, r9
 8002bf0:	414b      	adcs	r3, r1
 8002bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c00:	4659      	mov	r1, fp
 8002c02:	00cb      	lsls	r3, r1, #3
 8002c04:	4651      	mov	r1, sl
 8002c06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c0a:	4651      	mov	r1, sl
 8002c0c:	00ca      	lsls	r2, r1, #3
 8002c0e:	4610      	mov	r0, r2
 8002c10:	4619      	mov	r1, r3
 8002c12:	4603      	mov	r3, r0
 8002c14:	4642      	mov	r2, r8
 8002c16:	189b      	adds	r3, r3, r2
 8002c18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c1c:	464b      	mov	r3, r9
 8002c1e:	460a      	mov	r2, r1
 8002c20:	eb42 0303 	adc.w	r3, r2, r3
 8002c24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	18db      	adds	r3, r3, r3
 8002c40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c42:	4613      	mov	r3, r2
 8002c44:	eb42 0303 	adc.w	r3, r2, r3
 8002c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002c52:	f7fd fb1d 	bl	8000290 <__aeabi_uldivmod>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c90 <UART_SetConfig+0x2d4>)
 8002c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c60:	095b      	lsrs	r3, r3, #5
 8002c62:	2164      	movs	r1, #100	@ 0x64
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	3332      	adds	r3, #50	@ 0x32
 8002c6e:	4a08      	ldr	r2, [pc, #32]	@ (8002c90 <UART_SetConfig+0x2d4>)
 8002c70:	fba2 2303 	umull	r2, r3, r2, r3
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	f003 0207 	and.w	r2, r3, #7
 8002c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4422      	add	r2, r4
 8002c82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c84:	e106      	b.n	8002e94 <UART_SetConfig+0x4d8>
 8002c86:	bf00      	nop
 8002c88:	40011000 	.word	0x40011000
 8002c8c:	40011400 	.word	0x40011400
 8002c90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002ca2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002ca6:	4642      	mov	r2, r8
 8002ca8:	464b      	mov	r3, r9
 8002caa:	1891      	adds	r1, r2, r2
 8002cac:	6239      	str	r1, [r7, #32]
 8002cae:	415b      	adcs	r3, r3
 8002cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cb6:	4641      	mov	r1, r8
 8002cb8:	1854      	adds	r4, r2, r1
 8002cba:	4649      	mov	r1, r9
 8002cbc:	eb43 0501 	adc.w	r5, r3, r1
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	00eb      	lsls	r3, r5, #3
 8002cca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cce:	00e2      	lsls	r2, r4, #3
 8002cd0:	4614      	mov	r4, r2
 8002cd2:	461d      	mov	r5, r3
 8002cd4:	4643      	mov	r3, r8
 8002cd6:	18e3      	adds	r3, r4, r3
 8002cd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002cdc:	464b      	mov	r3, r9
 8002cde:	eb45 0303 	adc.w	r3, r5, r3
 8002ce2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cf2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d02:	4629      	mov	r1, r5
 8002d04:	008b      	lsls	r3, r1, #2
 8002d06:	4621      	mov	r1, r4
 8002d08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d0c:	4621      	mov	r1, r4
 8002d0e:	008a      	lsls	r2, r1, #2
 8002d10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d14:	f7fd fabc 	bl	8000290 <__aeabi_uldivmod>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4b60      	ldr	r3, [pc, #384]	@ (8002ea0 <UART_SetConfig+0x4e4>)
 8002d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	011c      	lsls	r4, r3, #4
 8002d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d38:	4642      	mov	r2, r8
 8002d3a:	464b      	mov	r3, r9
 8002d3c:	1891      	adds	r1, r2, r2
 8002d3e:	61b9      	str	r1, [r7, #24]
 8002d40:	415b      	adcs	r3, r3
 8002d42:	61fb      	str	r3, [r7, #28]
 8002d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d48:	4641      	mov	r1, r8
 8002d4a:	1851      	adds	r1, r2, r1
 8002d4c:	6139      	str	r1, [r7, #16]
 8002d4e:	4649      	mov	r1, r9
 8002d50:	414b      	adcs	r3, r1
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d60:	4659      	mov	r1, fp
 8002d62:	00cb      	lsls	r3, r1, #3
 8002d64:	4651      	mov	r1, sl
 8002d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d6a:	4651      	mov	r1, sl
 8002d6c:	00ca      	lsls	r2, r1, #3
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	4642      	mov	r2, r8
 8002d76:	189b      	adds	r3, r3, r2
 8002d78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d7c:	464b      	mov	r3, r9
 8002d7e:	460a      	mov	r2, r1
 8002d80:	eb42 0303 	adc.w	r3, r2, r3
 8002d84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002da0:	4649      	mov	r1, r9
 8002da2:	008b      	lsls	r3, r1, #2
 8002da4:	4641      	mov	r1, r8
 8002da6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002daa:	4641      	mov	r1, r8
 8002dac:	008a      	lsls	r2, r1, #2
 8002dae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002db2:	f7fd fa6d 	bl	8000290 <__aeabi_uldivmod>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4b38      	ldr	r3, [pc, #224]	@ (8002ea0 <UART_SetConfig+0x4e4>)
 8002dbe:	fba3 2301 	umull	r2, r3, r3, r1
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	2264      	movs	r2, #100	@ 0x64
 8002dc6:	fb02 f303 	mul.w	r3, r2, r3
 8002dca:	1acb      	subs	r3, r1, r3
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	3332      	adds	r3, #50	@ 0x32
 8002dd0:	4a33      	ldr	r2, [pc, #204]	@ (8002ea0 <UART_SetConfig+0x4e4>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ddc:	441c      	add	r4, r3
 8002dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002de2:	2200      	movs	r2, #0
 8002de4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002de6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002de8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002dec:	4642      	mov	r2, r8
 8002dee:	464b      	mov	r3, r9
 8002df0:	1891      	adds	r1, r2, r2
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	415b      	adcs	r3, r3
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dfc:	4641      	mov	r1, r8
 8002dfe:	1851      	adds	r1, r2, r1
 8002e00:	6039      	str	r1, [r7, #0]
 8002e02:	4649      	mov	r1, r9
 8002e04:	414b      	adcs	r3, r1
 8002e06:	607b      	str	r3, [r7, #4]
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e14:	4659      	mov	r1, fp
 8002e16:	00cb      	lsls	r3, r1, #3
 8002e18:	4651      	mov	r1, sl
 8002e1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e1e:	4651      	mov	r1, sl
 8002e20:	00ca      	lsls	r2, r1, #3
 8002e22:	4610      	mov	r0, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	4603      	mov	r3, r0
 8002e28:	4642      	mov	r2, r8
 8002e2a:	189b      	adds	r3, r3, r2
 8002e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e2e:	464b      	mov	r3, r9
 8002e30:	460a      	mov	r2, r1
 8002e32:	eb42 0303 	adc.w	r3, r2, r3
 8002e36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e42:	667a      	str	r2, [r7, #100]	@ 0x64
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002e50:	4649      	mov	r1, r9
 8002e52:	008b      	lsls	r3, r1, #2
 8002e54:	4641      	mov	r1, r8
 8002e56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e5a:	4641      	mov	r1, r8
 8002e5c:	008a      	lsls	r2, r1, #2
 8002e5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002e62:	f7fd fa15 	bl	8000290 <__aeabi_uldivmod>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea0 <UART_SetConfig+0x4e4>)
 8002e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e70:	095b      	lsrs	r3, r3, #5
 8002e72:	2164      	movs	r1, #100	@ 0x64
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	3332      	adds	r3, #50	@ 0x32
 8002e7e:	4a08      	ldr	r2, [pc, #32]	@ (8002ea0 <UART_SetConfig+0x4e4>)
 8002e80:	fba2 2303 	umull	r2, r3, r2, r3
 8002e84:	095b      	lsrs	r3, r3, #5
 8002e86:	f003 020f 	and.w	r2, r3, #15
 8002e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4422      	add	r2, r4
 8002e92:	609a      	str	r2, [r3, #8]
}
 8002e94:	bf00      	nop
 8002e96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ea0:	51eb851f 	.word	0x51eb851f

08002ea4 <siprintf>:
 8002ea4:	b40e      	push	{r1, r2, r3}
 8002ea6:	b510      	push	{r4, lr}
 8002ea8:	b09d      	sub	sp, #116	@ 0x74
 8002eaa:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002eac:	9002      	str	r0, [sp, #8]
 8002eae:	9006      	str	r0, [sp, #24]
 8002eb0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002eb4:	480a      	ldr	r0, [pc, #40]	@ (8002ee0 <siprintf+0x3c>)
 8002eb6:	9107      	str	r1, [sp, #28]
 8002eb8:	9104      	str	r1, [sp, #16]
 8002eba:	490a      	ldr	r1, [pc, #40]	@ (8002ee4 <siprintf+0x40>)
 8002ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ec0:	9105      	str	r1, [sp, #20]
 8002ec2:	2400      	movs	r4, #0
 8002ec4:	a902      	add	r1, sp, #8
 8002ec6:	6800      	ldr	r0, [r0, #0]
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002ecc:	f000 f9a2 	bl	8003214 <_svfiprintf_r>
 8002ed0:	9b02      	ldr	r3, [sp, #8]
 8002ed2:	701c      	strb	r4, [r3, #0]
 8002ed4:	b01d      	add	sp, #116	@ 0x74
 8002ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002eda:	b003      	add	sp, #12
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	2000000c 	.word	0x2000000c
 8002ee4:	ffff0208 	.word	0xffff0208

08002ee8 <memset>:
 8002ee8:	4402      	add	r2, r0
 8002eea:	4603      	mov	r3, r0
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d100      	bne.n	8002ef2 <memset+0xa>
 8002ef0:	4770      	bx	lr
 8002ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ef6:	e7f9      	b.n	8002eec <memset+0x4>

08002ef8 <__errno>:
 8002ef8:	4b01      	ldr	r3, [pc, #4]	@ (8002f00 <__errno+0x8>)
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	2000000c 	.word	0x2000000c

08002f04 <__libc_init_array>:
 8002f04:	b570      	push	{r4, r5, r6, lr}
 8002f06:	4d0d      	ldr	r5, [pc, #52]	@ (8002f3c <__libc_init_array+0x38>)
 8002f08:	4c0d      	ldr	r4, [pc, #52]	@ (8002f40 <__libc_init_array+0x3c>)
 8002f0a:	1b64      	subs	r4, r4, r5
 8002f0c:	10a4      	asrs	r4, r4, #2
 8002f0e:	2600      	movs	r6, #0
 8002f10:	42a6      	cmp	r6, r4
 8002f12:	d109      	bne.n	8002f28 <__libc_init_array+0x24>
 8002f14:	4d0b      	ldr	r5, [pc, #44]	@ (8002f44 <__libc_init_array+0x40>)
 8002f16:	4c0c      	ldr	r4, [pc, #48]	@ (8002f48 <__libc_init_array+0x44>)
 8002f18:	f000 fc64 	bl	80037e4 <_init>
 8002f1c:	1b64      	subs	r4, r4, r5
 8002f1e:	10a4      	asrs	r4, r4, #2
 8002f20:	2600      	movs	r6, #0
 8002f22:	42a6      	cmp	r6, r4
 8002f24:	d105      	bne.n	8002f32 <__libc_init_array+0x2e>
 8002f26:	bd70      	pop	{r4, r5, r6, pc}
 8002f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f2c:	4798      	blx	r3
 8002f2e:	3601      	adds	r6, #1
 8002f30:	e7ee      	b.n	8002f10 <__libc_init_array+0xc>
 8002f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f36:	4798      	blx	r3
 8002f38:	3601      	adds	r6, #1
 8002f3a:	e7f2      	b.n	8002f22 <__libc_init_array+0x1e>
 8002f3c:	08003934 	.word	0x08003934
 8002f40:	08003934 	.word	0x08003934
 8002f44:	08003934 	.word	0x08003934
 8002f48:	08003938 	.word	0x08003938

08002f4c <__retarget_lock_acquire_recursive>:
 8002f4c:	4770      	bx	lr

08002f4e <__retarget_lock_release_recursive>:
 8002f4e:	4770      	bx	lr

08002f50 <memcpy>:
 8002f50:	440a      	add	r2, r1
 8002f52:	4291      	cmp	r1, r2
 8002f54:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f58:	d100      	bne.n	8002f5c <memcpy+0xc>
 8002f5a:	4770      	bx	lr
 8002f5c:	b510      	push	{r4, lr}
 8002f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f66:	4291      	cmp	r1, r2
 8002f68:	d1f9      	bne.n	8002f5e <memcpy+0xe>
 8002f6a:	bd10      	pop	{r4, pc}

08002f6c <_free_r>:
 8002f6c:	b538      	push	{r3, r4, r5, lr}
 8002f6e:	4605      	mov	r5, r0
 8002f70:	2900      	cmp	r1, #0
 8002f72:	d041      	beq.n	8002ff8 <_free_r+0x8c>
 8002f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f78:	1f0c      	subs	r4, r1, #4
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bfb8      	it	lt
 8002f7e:	18e4      	addlt	r4, r4, r3
 8002f80:	f000 f8e0 	bl	8003144 <__malloc_lock>
 8002f84:	4a1d      	ldr	r2, [pc, #116]	@ (8002ffc <_free_r+0x90>)
 8002f86:	6813      	ldr	r3, [r2, #0]
 8002f88:	b933      	cbnz	r3, 8002f98 <_free_r+0x2c>
 8002f8a:	6063      	str	r3, [r4, #4]
 8002f8c:	6014      	str	r4, [r2, #0]
 8002f8e:	4628      	mov	r0, r5
 8002f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f94:	f000 b8dc 	b.w	8003150 <__malloc_unlock>
 8002f98:	42a3      	cmp	r3, r4
 8002f9a:	d908      	bls.n	8002fae <_free_r+0x42>
 8002f9c:	6820      	ldr	r0, [r4, #0]
 8002f9e:	1821      	adds	r1, r4, r0
 8002fa0:	428b      	cmp	r3, r1
 8002fa2:	bf01      	itttt	eq
 8002fa4:	6819      	ldreq	r1, [r3, #0]
 8002fa6:	685b      	ldreq	r3, [r3, #4]
 8002fa8:	1809      	addeq	r1, r1, r0
 8002faa:	6021      	streq	r1, [r4, #0]
 8002fac:	e7ed      	b.n	8002f8a <_free_r+0x1e>
 8002fae:	461a      	mov	r2, r3
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	b10b      	cbz	r3, 8002fb8 <_free_r+0x4c>
 8002fb4:	42a3      	cmp	r3, r4
 8002fb6:	d9fa      	bls.n	8002fae <_free_r+0x42>
 8002fb8:	6811      	ldr	r1, [r2, #0]
 8002fba:	1850      	adds	r0, r2, r1
 8002fbc:	42a0      	cmp	r0, r4
 8002fbe:	d10b      	bne.n	8002fd8 <_free_r+0x6c>
 8002fc0:	6820      	ldr	r0, [r4, #0]
 8002fc2:	4401      	add	r1, r0
 8002fc4:	1850      	adds	r0, r2, r1
 8002fc6:	4283      	cmp	r3, r0
 8002fc8:	6011      	str	r1, [r2, #0]
 8002fca:	d1e0      	bne.n	8002f8e <_free_r+0x22>
 8002fcc:	6818      	ldr	r0, [r3, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	6053      	str	r3, [r2, #4]
 8002fd2:	4408      	add	r0, r1
 8002fd4:	6010      	str	r0, [r2, #0]
 8002fd6:	e7da      	b.n	8002f8e <_free_r+0x22>
 8002fd8:	d902      	bls.n	8002fe0 <_free_r+0x74>
 8002fda:	230c      	movs	r3, #12
 8002fdc:	602b      	str	r3, [r5, #0]
 8002fde:	e7d6      	b.n	8002f8e <_free_r+0x22>
 8002fe0:	6820      	ldr	r0, [r4, #0]
 8002fe2:	1821      	adds	r1, r4, r0
 8002fe4:	428b      	cmp	r3, r1
 8002fe6:	bf04      	itt	eq
 8002fe8:	6819      	ldreq	r1, [r3, #0]
 8002fea:	685b      	ldreq	r3, [r3, #4]
 8002fec:	6063      	str	r3, [r4, #4]
 8002fee:	bf04      	itt	eq
 8002ff0:	1809      	addeq	r1, r1, r0
 8002ff2:	6021      	streq	r1, [r4, #0]
 8002ff4:	6054      	str	r4, [r2, #4]
 8002ff6:	e7ca      	b.n	8002f8e <_free_r+0x22>
 8002ff8:	bd38      	pop	{r3, r4, r5, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000264 	.word	0x20000264

08003000 <sbrk_aligned>:
 8003000:	b570      	push	{r4, r5, r6, lr}
 8003002:	4e0f      	ldr	r6, [pc, #60]	@ (8003040 <sbrk_aligned+0x40>)
 8003004:	460c      	mov	r4, r1
 8003006:	6831      	ldr	r1, [r6, #0]
 8003008:	4605      	mov	r5, r0
 800300a:	b911      	cbnz	r1, 8003012 <sbrk_aligned+0x12>
 800300c:	f000 fba4 	bl	8003758 <_sbrk_r>
 8003010:	6030      	str	r0, [r6, #0]
 8003012:	4621      	mov	r1, r4
 8003014:	4628      	mov	r0, r5
 8003016:	f000 fb9f 	bl	8003758 <_sbrk_r>
 800301a:	1c43      	adds	r3, r0, #1
 800301c:	d103      	bne.n	8003026 <sbrk_aligned+0x26>
 800301e:	f04f 34ff 	mov.w	r4, #4294967295
 8003022:	4620      	mov	r0, r4
 8003024:	bd70      	pop	{r4, r5, r6, pc}
 8003026:	1cc4      	adds	r4, r0, #3
 8003028:	f024 0403 	bic.w	r4, r4, #3
 800302c:	42a0      	cmp	r0, r4
 800302e:	d0f8      	beq.n	8003022 <sbrk_aligned+0x22>
 8003030:	1a21      	subs	r1, r4, r0
 8003032:	4628      	mov	r0, r5
 8003034:	f000 fb90 	bl	8003758 <_sbrk_r>
 8003038:	3001      	adds	r0, #1
 800303a:	d1f2      	bne.n	8003022 <sbrk_aligned+0x22>
 800303c:	e7ef      	b.n	800301e <sbrk_aligned+0x1e>
 800303e:	bf00      	nop
 8003040:	20000260 	.word	0x20000260

08003044 <_malloc_r>:
 8003044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003048:	1ccd      	adds	r5, r1, #3
 800304a:	f025 0503 	bic.w	r5, r5, #3
 800304e:	3508      	adds	r5, #8
 8003050:	2d0c      	cmp	r5, #12
 8003052:	bf38      	it	cc
 8003054:	250c      	movcc	r5, #12
 8003056:	2d00      	cmp	r5, #0
 8003058:	4606      	mov	r6, r0
 800305a:	db01      	blt.n	8003060 <_malloc_r+0x1c>
 800305c:	42a9      	cmp	r1, r5
 800305e:	d904      	bls.n	800306a <_malloc_r+0x26>
 8003060:	230c      	movs	r3, #12
 8003062:	6033      	str	r3, [r6, #0]
 8003064:	2000      	movs	r0, #0
 8003066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800306a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003140 <_malloc_r+0xfc>
 800306e:	f000 f869 	bl	8003144 <__malloc_lock>
 8003072:	f8d8 3000 	ldr.w	r3, [r8]
 8003076:	461c      	mov	r4, r3
 8003078:	bb44      	cbnz	r4, 80030cc <_malloc_r+0x88>
 800307a:	4629      	mov	r1, r5
 800307c:	4630      	mov	r0, r6
 800307e:	f7ff ffbf 	bl	8003000 <sbrk_aligned>
 8003082:	1c43      	adds	r3, r0, #1
 8003084:	4604      	mov	r4, r0
 8003086:	d158      	bne.n	800313a <_malloc_r+0xf6>
 8003088:	f8d8 4000 	ldr.w	r4, [r8]
 800308c:	4627      	mov	r7, r4
 800308e:	2f00      	cmp	r7, #0
 8003090:	d143      	bne.n	800311a <_malloc_r+0xd6>
 8003092:	2c00      	cmp	r4, #0
 8003094:	d04b      	beq.n	800312e <_malloc_r+0xea>
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	4639      	mov	r1, r7
 800309a:	4630      	mov	r0, r6
 800309c:	eb04 0903 	add.w	r9, r4, r3
 80030a0:	f000 fb5a 	bl	8003758 <_sbrk_r>
 80030a4:	4581      	cmp	r9, r0
 80030a6:	d142      	bne.n	800312e <_malloc_r+0xea>
 80030a8:	6821      	ldr	r1, [r4, #0]
 80030aa:	1a6d      	subs	r5, r5, r1
 80030ac:	4629      	mov	r1, r5
 80030ae:	4630      	mov	r0, r6
 80030b0:	f7ff ffa6 	bl	8003000 <sbrk_aligned>
 80030b4:	3001      	adds	r0, #1
 80030b6:	d03a      	beq.n	800312e <_malloc_r+0xea>
 80030b8:	6823      	ldr	r3, [r4, #0]
 80030ba:	442b      	add	r3, r5
 80030bc:	6023      	str	r3, [r4, #0]
 80030be:	f8d8 3000 	ldr.w	r3, [r8]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	bb62      	cbnz	r2, 8003120 <_malloc_r+0xdc>
 80030c6:	f8c8 7000 	str.w	r7, [r8]
 80030ca:	e00f      	b.n	80030ec <_malloc_r+0xa8>
 80030cc:	6822      	ldr	r2, [r4, #0]
 80030ce:	1b52      	subs	r2, r2, r5
 80030d0:	d420      	bmi.n	8003114 <_malloc_r+0xd0>
 80030d2:	2a0b      	cmp	r2, #11
 80030d4:	d917      	bls.n	8003106 <_malloc_r+0xc2>
 80030d6:	1961      	adds	r1, r4, r5
 80030d8:	42a3      	cmp	r3, r4
 80030da:	6025      	str	r5, [r4, #0]
 80030dc:	bf18      	it	ne
 80030de:	6059      	strne	r1, [r3, #4]
 80030e0:	6863      	ldr	r3, [r4, #4]
 80030e2:	bf08      	it	eq
 80030e4:	f8c8 1000 	streq.w	r1, [r8]
 80030e8:	5162      	str	r2, [r4, r5]
 80030ea:	604b      	str	r3, [r1, #4]
 80030ec:	4630      	mov	r0, r6
 80030ee:	f000 f82f 	bl	8003150 <__malloc_unlock>
 80030f2:	f104 000b 	add.w	r0, r4, #11
 80030f6:	1d23      	adds	r3, r4, #4
 80030f8:	f020 0007 	bic.w	r0, r0, #7
 80030fc:	1ac2      	subs	r2, r0, r3
 80030fe:	bf1c      	itt	ne
 8003100:	1a1b      	subne	r3, r3, r0
 8003102:	50a3      	strne	r3, [r4, r2]
 8003104:	e7af      	b.n	8003066 <_malloc_r+0x22>
 8003106:	6862      	ldr	r2, [r4, #4]
 8003108:	42a3      	cmp	r3, r4
 800310a:	bf0c      	ite	eq
 800310c:	f8c8 2000 	streq.w	r2, [r8]
 8003110:	605a      	strne	r2, [r3, #4]
 8003112:	e7eb      	b.n	80030ec <_malloc_r+0xa8>
 8003114:	4623      	mov	r3, r4
 8003116:	6864      	ldr	r4, [r4, #4]
 8003118:	e7ae      	b.n	8003078 <_malloc_r+0x34>
 800311a:	463c      	mov	r4, r7
 800311c:	687f      	ldr	r7, [r7, #4]
 800311e:	e7b6      	b.n	800308e <_malloc_r+0x4a>
 8003120:	461a      	mov	r2, r3
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	42a3      	cmp	r3, r4
 8003126:	d1fb      	bne.n	8003120 <_malloc_r+0xdc>
 8003128:	2300      	movs	r3, #0
 800312a:	6053      	str	r3, [r2, #4]
 800312c:	e7de      	b.n	80030ec <_malloc_r+0xa8>
 800312e:	230c      	movs	r3, #12
 8003130:	6033      	str	r3, [r6, #0]
 8003132:	4630      	mov	r0, r6
 8003134:	f000 f80c 	bl	8003150 <__malloc_unlock>
 8003138:	e794      	b.n	8003064 <_malloc_r+0x20>
 800313a:	6005      	str	r5, [r0, #0]
 800313c:	e7d6      	b.n	80030ec <_malloc_r+0xa8>
 800313e:	bf00      	nop
 8003140:	20000264 	.word	0x20000264

08003144 <__malloc_lock>:
 8003144:	4801      	ldr	r0, [pc, #4]	@ (800314c <__malloc_lock+0x8>)
 8003146:	f7ff bf01 	b.w	8002f4c <__retarget_lock_acquire_recursive>
 800314a:	bf00      	nop
 800314c:	2000025c 	.word	0x2000025c

08003150 <__malloc_unlock>:
 8003150:	4801      	ldr	r0, [pc, #4]	@ (8003158 <__malloc_unlock+0x8>)
 8003152:	f7ff befc 	b.w	8002f4e <__retarget_lock_release_recursive>
 8003156:	bf00      	nop
 8003158:	2000025c 	.word	0x2000025c

0800315c <__ssputs_r>:
 800315c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003160:	688e      	ldr	r6, [r1, #8]
 8003162:	461f      	mov	r7, r3
 8003164:	42be      	cmp	r6, r7
 8003166:	680b      	ldr	r3, [r1, #0]
 8003168:	4682      	mov	sl, r0
 800316a:	460c      	mov	r4, r1
 800316c:	4690      	mov	r8, r2
 800316e:	d82d      	bhi.n	80031cc <__ssputs_r+0x70>
 8003170:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003174:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003178:	d026      	beq.n	80031c8 <__ssputs_r+0x6c>
 800317a:	6965      	ldr	r5, [r4, #20]
 800317c:	6909      	ldr	r1, [r1, #16]
 800317e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003182:	eba3 0901 	sub.w	r9, r3, r1
 8003186:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800318a:	1c7b      	adds	r3, r7, #1
 800318c:	444b      	add	r3, r9
 800318e:	106d      	asrs	r5, r5, #1
 8003190:	429d      	cmp	r5, r3
 8003192:	bf38      	it	cc
 8003194:	461d      	movcc	r5, r3
 8003196:	0553      	lsls	r3, r2, #21
 8003198:	d527      	bpl.n	80031ea <__ssputs_r+0x8e>
 800319a:	4629      	mov	r1, r5
 800319c:	f7ff ff52 	bl	8003044 <_malloc_r>
 80031a0:	4606      	mov	r6, r0
 80031a2:	b360      	cbz	r0, 80031fe <__ssputs_r+0xa2>
 80031a4:	6921      	ldr	r1, [r4, #16]
 80031a6:	464a      	mov	r2, r9
 80031a8:	f7ff fed2 	bl	8002f50 <memcpy>
 80031ac:	89a3      	ldrh	r3, [r4, #12]
 80031ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80031b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031b6:	81a3      	strh	r3, [r4, #12]
 80031b8:	6126      	str	r6, [r4, #16]
 80031ba:	6165      	str	r5, [r4, #20]
 80031bc:	444e      	add	r6, r9
 80031be:	eba5 0509 	sub.w	r5, r5, r9
 80031c2:	6026      	str	r6, [r4, #0]
 80031c4:	60a5      	str	r5, [r4, #8]
 80031c6:	463e      	mov	r6, r7
 80031c8:	42be      	cmp	r6, r7
 80031ca:	d900      	bls.n	80031ce <__ssputs_r+0x72>
 80031cc:	463e      	mov	r6, r7
 80031ce:	6820      	ldr	r0, [r4, #0]
 80031d0:	4632      	mov	r2, r6
 80031d2:	4641      	mov	r1, r8
 80031d4:	f000 faa6 	bl	8003724 <memmove>
 80031d8:	68a3      	ldr	r3, [r4, #8]
 80031da:	1b9b      	subs	r3, r3, r6
 80031dc:	60a3      	str	r3, [r4, #8]
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	4433      	add	r3, r6
 80031e2:	6023      	str	r3, [r4, #0]
 80031e4:	2000      	movs	r0, #0
 80031e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ea:	462a      	mov	r2, r5
 80031ec:	f000 fac4 	bl	8003778 <_realloc_r>
 80031f0:	4606      	mov	r6, r0
 80031f2:	2800      	cmp	r0, #0
 80031f4:	d1e0      	bne.n	80031b8 <__ssputs_r+0x5c>
 80031f6:	6921      	ldr	r1, [r4, #16]
 80031f8:	4650      	mov	r0, sl
 80031fa:	f7ff feb7 	bl	8002f6c <_free_r>
 80031fe:	230c      	movs	r3, #12
 8003200:	f8ca 3000 	str.w	r3, [sl]
 8003204:	89a3      	ldrh	r3, [r4, #12]
 8003206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800320a:	81a3      	strh	r3, [r4, #12]
 800320c:	f04f 30ff 	mov.w	r0, #4294967295
 8003210:	e7e9      	b.n	80031e6 <__ssputs_r+0x8a>
	...

08003214 <_svfiprintf_r>:
 8003214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003218:	4698      	mov	r8, r3
 800321a:	898b      	ldrh	r3, [r1, #12]
 800321c:	061b      	lsls	r3, r3, #24
 800321e:	b09d      	sub	sp, #116	@ 0x74
 8003220:	4607      	mov	r7, r0
 8003222:	460d      	mov	r5, r1
 8003224:	4614      	mov	r4, r2
 8003226:	d510      	bpl.n	800324a <_svfiprintf_r+0x36>
 8003228:	690b      	ldr	r3, [r1, #16]
 800322a:	b973      	cbnz	r3, 800324a <_svfiprintf_r+0x36>
 800322c:	2140      	movs	r1, #64	@ 0x40
 800322e:	f7ff ff09 	bl	8003044 <_malloc_r>
 8003232:	6028      	str	r0, [r5, #0]
 8003234:	6128      	str	r0, [r5, #16]
 8003236:	b930      	cbnz	r0, 8003246 <_svfiprintf_r+0x32>
 8003238:	230c      	movs	r3, #12
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	f04f 30ff 	mov.w	r0, #4294967295
 8003240:	b01d      	add	sp, #116	@ 0x74
 8003242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003246:	2340      	movs	r3, #64	@ 0x40
 8003248:	616b      	str	r3, [r5, #20]
 800324a:	2300      	movs	r3, #0
 800324c:	9309      	str	r3, [sp, #36]	@ 0x24
 800324e:	2320      	movs	r3, #32
 8003250:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003254:	f8cd 800c 	str.w	r8, [sp, #12]
 8003258:	2330      	movs	r3, #48	@ 0x30
 800325a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80033f8 <_svfiprintf_r+0x1e4>
 800325e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003262:	f04f 0901 	mov.w	r9, #1
 8003266:	4623      	mov	r3, r4
 8003268:	469a      	mov	sl, r3
 800326a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800326e:	b10a      	cbz	r2, 8003274 <_svfiprintf_r+0x60>
 8003270:	2a25      	cmp	r2, #37	@ 0x25
 8003272:	d1f9      	bne.n	8003268 <_svfiprintf_r+0x54>
 8003274:	ebba 0b04 	subs.w	fp, sl, r4
 8003278:	d00b      	beq.n	8003292 <_svfiprintf_r+0x7e>
 800327a:	465b      	mov	r3, fp
 800327c:	4622      	mov	r2, r4
 800327e:	4629      	mov	r1, r5
 8003280:	4638      	mov	r0, r7
 8003282:	f7ff ff6b 	bl	800315c <__ssputs_r>
 8003286:	3001      	adds	r0, #1
 8003288:	f000 80a7 	beq.w	80033da <_svfiprintf_r+0x1c6>
 800328c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800328e:	445a      	add	r2, fp
 8003290:	9209      	str	r2, [sp, #36]	@ 0x24
 8003292:	f89a 3000 	ldrb.w	r3, [sl]
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 809f 	beq.w	80033da <_svfiprintf_r+0x1c6>
 800329c:	2300      	movs	r3, #0
 800329e:	f04f 32ff 	mov.w	r2, #4294967295
 80032a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032a6:	f10a 0a01 	add.w	sl, sl, #1
 80032aa:	9304      	str	r3, [sp, #16]
 80032ac:	9307      	str	r3, [sp, #28]
 80032ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80032b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80032b4:	4654      	mov	r4, sl
 80032b6:	2205      	movs	r2, #5
 80032b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032bc:	484e      	ldr	r0, [pc, #312]	@ (80033f8 <_svfiprintf_r+0x1e4>)
 80032be:	f7fc ff97 	bl	80001f0 <memchr>
 80032c2:	9a04      	ldr	r2, [sp, #16]
 80032c4:	b9d8      	cbnz	r0, 80032fe <_svfiprintf_r+0xea>
 80032c6:	06d0      	lsls	r0, r2, #27
 80032c8:	bf44      	itt	mi
 80032ca:	2320      	movmi	r3, #32
 80032cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032d0:	0711      	lsls	r1, r2, #28
 80032d2:	bf44      	itt	mi
 80032d4:	232b      	movmi	r3, #43	@ 0x2b
 80032d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032da:	f89a 3000 	ldrb.w	r3, [sl]
 80032de:	2b2a      	cmp	r3, #42	@ 0x2a
 80032e0:	d015      	beq.n	800330e <_svfiprintf_r+0xfa>
 80032e2:	9a07      	ldr	r2, [sp, #28]
 80032e4:	4654      	mov	r4, sl
 80032e6:	2000      	movs	r0, #0
 80032e8:	f04f 0c0a 	mov.w	ip, #10
 80032ec:	4621      	mov	r1, r4
 80032ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032f2:	3b30      	subs	r3, #48	@ 0x30
 80032f4:	2b09      	cmp	r3, #9
 80032f6:	d94b      	bls.n	8003390 <_svfiprintf_r+0x17c>
 80032f8:	b1b0      	cbz	r0, 8003328 <_svfiprintf_r+0x114>
 80032fa:	9207      	str	r2, [sp, #28]
 80032fc:	e014      	b.n	8003328 <_svfiprintf_r+0x114>
 80032fe:	eba0 0308 	sub.w	r3, r0, r8
 8003302:	fa09 f303 	lsl.w	r3, r9, r3
 8003306:	4313      	orrs	r3, r2
 8003308:	9304      	str	r3, [sp, #16]
 800330a:	46a2      	mov	sl, r4
 800330c:	e7d2      	b.n	80032b4 <_svfiprintf_r+0xa0>
 800330e:	9b03      	ldr	r3, [sp, #12]
 8003310:	1d19      	adds	r1, r3, #4
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	9103      	str	r1, [sp, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	bfbb      	ittet	lt
 800331a:	425b      	neglt	r3, r3
 800331c:	f042 0202 	orrlt.w	r2, r2, #2
 8003320:	9307      	strge	r3, [sp, #28]
 8003322:	9307      	strlt	r3, [sp, #28]
 8003324:	bfb8      	it	lt
 8003326:	9204      	strlt	r2, [sp, #16]
 8003328:	7823      	ldrb	r3, [r4, #0]
 800332a:	2b2e      	cmp	r3, #46	@ 0x2e
 800332c:	d10a      	bne.n	8003344 <_svfiprintf_r+0x130>
 800332e:	7863      	ldrb	r3, [r4, #1]
 8003330:	2b2a      	cmp	r3, #42	@ 0x2a
 8003332:	d132      	bne.n	800339a <_svfiprintf_r+0x186>
 8003334:	9b03      	ldr	r3, [sp, #12]
 8003336:	1d1a      	adds	r2, r3, #4
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	9203      	str	r2, [sp, #12]
 800333c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003340:	3402      	adds	r4, #2
 8003342:	9305      	str	r3, [sp, #20]
 8003344:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003408 <_svfiprintf_r+0x1f4>
 8003348:	7821      	ldrb	r1, [r4, #0]
 800334a:	2203      	movs	r2, #3
 800334c:	4650      	mov	r0, sl
 800334e:	f7fc ff4f 	bl	80001f0 <memchr>
 8003352:	b138      	cbz	r0, 8003364 <_svfiprintf_r+0x150>
 8003354:	9b04      	ldr	r3, [sp, #16]
 8003356:	eba0 000a 	sub.w	r0, r0, sl
 800335a:	2240      	movs	r2, #64	@ 0x40
 800335c:	4082      	lsls	r2, r0
 800335e:	4313      	orrs	r3, r2
 8003360:	3401      	adds	r4, #1
 8003362:	9304      	str	r3, [sp, #16]
 8003364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003368:	4824      	ldr	r0, [pc, #144]	@ (80033fc <_svfiprintf_r+0x1e8>)
 800336a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800336e:	2206      	movs	r2, #6
 8003370:	f7fc ff3e 	bl	80001f0 <memchr>
 8003374:	2800      	cmp	r0, #0
 8003376:	d036      	beq.n	80033e6 <_svfiprintf_r+0x1d2>
 8003378:	4b21      	ldr	r3, [pc, #132]	@ (8003400 <_svfiprintf_r+0x1ec>)
 800337a:	bb1b      	cbnz	r3, 80033c4 <_svfiprintf_r+0x1b0>
 800337c:	9b03      	ldr	r3, [sp, #12]
 800337e:	3307      	adds	r3, #7
 8003380:	f023 0307 	bic.w	r3, r3, #7
 8003384:	3308      	adds	r3, #8
 8003386:	9303      	str	r3, [sp, #12]
 8003388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800338a:	4433      	add	r3, r6
 800338c:	9309      	str	r3, [sp, #36]	@ 0x24
 800338e:	e76a      	b.n	8003266 <_svfiprintf_r+0x52>
 8003390:	fb0c 3202 	mla	r2, ip, r2, r3
 8003394:	460c      	mov	r4, r1
 8003396:	2001      	movs	r0, #1
 8003398:	e7a8      	b.n	80032ec <_svfiprintf_r+0xd8>
 800339a:	2300      	movs	r3, #0
 800339c:	3401      	adds	r4, #1
 800339e:	9305      	str	r3, [sp, #20]
 80033a0:	4619      	mov	r1, r3
 80033a2:	f04f 0c0a 	mov.w	ip, #10
 80033a6:	4620      	mov	r0, r4
 80033a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033ac:	3a30      	subs	r2, #48	@ 0x30
 80033ae:	2a09      	cmp	r2, #9
 80033b0:	d903      	bls.n	80033ba <_svfiprintf_r+0x1a6>
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0c6      	beq.n	8003344 <_svfiprintf_r+0x130>
 80033b6:	9105      	str	r1, [sp, #20]
 80033b8:	e7c4      	b.n	8003344 <_svfiprintf_r+0x130>
 80033ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80033be:	4604      	mov	r4, r0
 80033c0:	2301      	movs	r3, #1
 80033c2:	e7f0      	b.n	80033a6 <_svfiprintf_r+0x192>
 80033c4:	ab03      	add	r3, sp, #12
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	462a      	mov	r2, r5
 80033ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003404 <_svfiprintf_r+0x1f0>)
 80033cc:	a904      	add	r1, sp, #16
 80033ce:	4638      	mov	r0, r7
 80033d0:	f3af 8000 	nop.w
 80033d4:	1c42      	adds	r2, r0, #1
 80033d6:	4606      	mov	r6, r0
 80033d8:	d1d6      	bne.n	8003388 <_svfiprintf_r+0x174>
 80033da:	89ab      	ldrh	r3, [r5, #12]
 80033dc:	065b      	lsls	r3, r3, #25
 80033de:	f53f af2d 	bmi.w	800323c <_svfiprintf_r+0x28>
 80033e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80033e4:	e72c      	b.n	8003240 <_svfiprintf_r+0x2c>
 80033e6:	ab03      	add	r3, sp, #12
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	462a      	mov	r2, r5
 80033ec:	4b05      	ldr	r3, [pc, #20]	@ (8003404 <_svfiprintf_r+0x1f0>)
 80033ee:	a904      	add	r1, sp, #16
 80033f0:	4638      	mov	r0, r7
 80033f2:	f000 f879 	bl	80034e8 <_printf_i>
 80033f6:	e7ed      	b.n	80033d4 <_svfiprintf_r+0x1c0>
 80033f8:	080038f8 	.word	0x080038f8
 80033fc:	08003902 	.word	0x08003902
 8003400:	00000000 	.word	0x00000000
 8003404:	0800315d 	.word	0x0800315d
 8003408:	080038fe 	.word	0x080038fe

0800340c <_printf_common>:
 800340c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003410:	4616      	mov	r6, r2
 8003412:	4698      	mov	r8, r3
 8003414:	688a      	ldr	r2, [r1, #8]
 8003416:	690b      	ldr	r3, [r1, #16]
 8003418:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800341c:	4293      	cmp	r3, r2
 800341e:	bfb8      	it	lt
 8003420:	4613      	movlt	r3, r2
 8003422:	6033      	str	r3, [r6, #0]
 8003424:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003428:	4607      	mov	r7, r0
 800342a:	460c      	mov	r4, r1
 800342c:	b10a      	cbz	r2, 8003432 <_printf_common+0x26>
 800342e:	3301      	adds	r3, #1
 8003430:	6033      	str	r3, [r6, #0]
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	0699      	lsls	r1, r3, #26
 8003436:	bf42      	ittt	mi
 8003438:	6833      	ldrmi	r3, [r6, #0]
 800343a:	3302      	addmi	r3, #2
 800343c:	6033      	strmi	r3, [r6, #0]
 800343e:	6825      	ldr	r5, [r4, #0]
 8003440:	f015 0506 	ands.w	r5, r5, #6
 8003444:	d106      	bne.n	8003454 <_printf_common+0x48>
 8003446:	f104 0a19 	add.w	sl, r4, #25
 800344a:	68e3      	ldr	r3, [r4, #12]
 800344c:	6832      	ldr	r2, [r6, #0]
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	42ab      	cmp	r3, r5
 8003452:	dc26      	bgt.n	80034a2 <_printf_common+0x96>
 8003454:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003458:	6822      	ldr	r2, [r4, #0]
 800345a:	3b00      	subs	r3, #0
 800345c:	bf18      	it	ne
 800345e:	2301      	movne	r3, #1
 8003460:	0692      	lsls	r2, r2, #26
 8003462:	d42b      	bmi.n	80034bc <_printf_common+0xb0>
 8003464:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003468:	4641      	mov	r1, r8
 800346a:	4638      	mov	r0, r7
 800346c:	47c8      	blx	r9
 800346e:	3001      	adds	r0, #1
 8003470:	d01e      	beq.n	80034b0 <_printf_common+0xa4>
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	6922      	ldr	r2, [r4, #16]
 8003476:	f003 0306 	and.w	r3, r3, #6
 800347a:	2b04      	cmp	r3, #4
 800347c:	bf02      	ittt	eq
 800347e:	68e5      	ldreq	r5, [r4, #12]
 8003480:	6833      	ldreq	r3, [r6, #0]
 8003482:	1aed      	subeq	r5, r5, r3
 8003484:	68a3      	ldr	r3, [r4, #8]
 8003486:	bf0c      	ite	eq
 8003488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800348c:	2500      	movne	r5, #0
 800348e:	4293      	cmp	r3, r2
 8003490:	bfc4      	itt	gt
 8003492:	1a9b      	subgt	r3, r3, r2
 8003494:	18ed      	addgt	r5, r5, r3
 8003496:	2600      	movs	r6, #0
 8003498:	341a      	adds	r4, #26
 800349a:	42b5      	cmp	r5, r6
 800349c:	d11a      	bne.n	80034d4 <_printf_common+0xc8>
 800349e:	2000      	movs	r0, #0
 80034a0:	e008      	b.n	80034b4 <_printf_common+0xa8>
 80034a2:	2301      	movs	r3, #1
 80034a4:	4652      	mov	r2, sl
 80034a6:	4641      	mov	r1, r8
 80034a8:	4638      	mov	r0, r7
 80034aa:	47c8      	blx	r9
 80034ac:	3001      	adds	r0, #1
 80034ae:	d103      	bne.n	80034b8 <_printf_common+0xac>
 80034b0:	f04f 30ff 	mov.w	r0, #4294967295
 80034b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034b8:	3501      	adds	r5, #1
 80034ba:	e7c6      	b.n	800344a <_printf_common+0x3e>
 80034bc:	18e1      	adds	r1, r4, r3
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	2030      	movs	r0, #48	@ 0x30
 80034c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80034c6:	4422      	add	r2, r4
 80034c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80034cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80034d0:	3302      	adds	r3, #2
 80034d2:	e7c7      	b.n	8003464 <_printf_common+0x58>
 80034d4:	2301      	movs	r3, #1
 80034d6:	4622      	mov	r2, r4
 80034d8:	4641      	mov	r1, r8
 80034da:	4638      	mov	r0, r7
 80034dc:	47c8      	blx	r9
 80034de:	3001      	adds	r0, #1
 80034e0:	d0e6      	beq.n	80034b0 <_printf_common+0xa4>
 80034e2:	3601      	adds	r6, #1
 80034e4:	e7d9      	b.n	800349a <_printf_common+0x8e>
	...

080034e8 <_printf_i>:
 80034e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034ec:	7e0f      	ldrb	r7, [r1, #24]
 80034ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80034f0:	2f78      	cmp	r7, #120	@ 0x78
 80034f2:	4691      	mov	r9, r2
 80034f4:	4680      	mov	r8, r0
 80034f6:	460c      	mov	r4, r1
 80034f8:	469a      	mov	sl, r3
 80034fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80034fe:	d807      	bhi.n	8003510 <_printf_i+0x28>
 8003500:	2f62      	cmp	r7, #98	@ 0x62
 8003502:	d80a      	bhi.n	800351a <_printf_i+0x32>
 8003504:	2f00      	cmp	r7, #0
 8003506:	f000 80d1 	beq.w	80036ac <_printf_i+0x1c4>
 800350a:	2f58      	cmp	r7, #88	@ 0x58
 800350c:	f000 80b8 	beq.w	8003680 <_printf_i+0x198>
 8003510:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003514:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003518:	e03a      	b.n	8003590 <_printf_i+0xa8>
 800351a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800351e:	2b15      	cmp	r3, #21
 8003520:	d8f6      	bhi.n	8003510 <_printf_i+0x28>
 8003522:	a101      	add	r1, pc, #4	@ (adr r1, 8003528 <_printf_i+0x40>)
 8003524:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003528:	08003581 	.word	0x08003581
 800352c:	08003595 	.word	0x08003595
 8003530:	08003511 	.word	0x08003511
 8003534:	08003511 	.word	0x08003511
 8003538:	08003511 	.word	0x08003511
 800353c:	08003511 	.word	0x08003511
 8003540:	08003595 	.word	0x08003595
 8003544:	08003511 	.word	0x08003511
 8003548:	08003511 	.word	0x08003511
 800354c:	08003511 	.word	0x08003511
 8003550:	08003511 	.word	0x08003511
 8003554:	08003693 	.word	0x08003693
 8003558:	080035bf 	.word	0x080035bf
 800355c:	0800364d 	.word	0x0800364d
 8003560:	08003511 	.word	0x08003511
 8003564:	08003511 	.word	0x08003511
 8003568:	080036b5 	.word	0x080036b5
 800356c:	08003511 	.word	0x08003511
 8003570:	080035bf 	.word	0x080035bf
 8003574:	08003511 	.word	0x08003511
 8003578:	08003511 	.word	0x08003511
 800357c:	08003655 	.word	0x08003655
 8003580:	6833      	ldr	r3, [r6, #0]
 8003582:	1d1a      	adds	r2, r3, #4
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6032      	str	r2, [r6, #0]
 8003588:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800358c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003590:	2301      	movs	r3, #1
 8003592:	e09c      	b.n	80036ce <_printf_i+0x1e6>
 8003594:	6833      	ldr	r3, [r6, #0]
 8003596:	6820      	ldr	r0, [r4, #0]
 8003598:	1d19      	adds	r1, r3, #4
 800359a:	6031      	str	r1, [r6, #0]
 800359c:	0606      	lsls	r6, r0, #24
 800359e:	d501      	bpl.n	80035a4 <_printf_i+0xbc>
 80035a0:	681d      	ldr	r5, [r3, #0]
 80035a2:	e003      	b.n	80035ac <_printf_i+0xc4>
 80035a4:	0645      	lsls	r5, r0, #25
 80035a6:	d5fb      	bpl.n	80035a0 <_printf_i+0xb8>
 80035a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80035ac:	2d00      	cmp	r5, #0
 80035ae:	da03      	bge.n	80035b8 <_printf_i+0xd0>
 80035b0:	232d      	movs	r3, #45	@ 0x2d
 80035b2:	426d      	negs	r5, r5
 80035b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035b8:	4858      	ldr	r0, [pc, #352]	@ (800371c <_printf_i+0x234>)
 80035ba:	230a      	movs	r3, #10
 80035bc:	e011      	b.n	80035e2 <_printf_i+0xfa>
 80035be:	6821      	ldr	r1, [r4, #0]
 80035c0:	6833      	ldr	r3, [r6, #0]
 80035c2:	0608      	lsls	r0, r1, #24
 80035c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80035c8:	d402      	bmi.n	80035d0 <_printf_i+0xe8>
 80035ca:	0649      	lsls	r1, r1, #25
 80035cc:	bf48      	it	mi
 80035ce:	b2ad      	uxthmi	r5, r5
 80035d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80035d2:	4852      	ldr	r0, [pc, #328]	@ (800371c <_printf_i+0x234>)
 80035d4:	6033      	str	r3, [r6, #0]
 80035d6:	bf14      	ite	ne
 80035d8:	230a      	movne	r3, #10
 80035da:	2308      	moveq	r3, #8
 80035dc:	2100      	movs	r1, #0
 80035de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80035e2:	6866      	ldr	r6, [r4, #4]
 80035e4:	60a6      	str	r6, [r4, #8]
 80035e6:	2e00      	cmp	r6, #0
 80035e8:	db05      	blt.n	80035f6 <_printf_i+0x10e>
 80035ea:	6821      	ldr	r1, [r4, #0]
 80035ec:	432e      	orrs	r6, r5
 80035ee:	f021 0104 	bic.w	r1, r1, #4
 80035f2:	6021      	str	r1, [r4, #0]
 80035f4:	d04b      	beq.n	800368e <_printf_i+0x1a6>
 80035f6:	4616      	mov	r6, r2
 80035f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80035fc:	fb03 5711 	mls	r7, r3, r1, r5
 8003600:	5dc7      	ldrb	r7, [r0, r7]
 8003602:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003606:	462f      	mov	r7, r5
 8003608:	42bb      	cmp	r3, r7
 800360a:	460d      	mov	r5, r1
 800360c:	d9f4      	bls.n	80035f8 <_printf_i+0x110>
 800360e:	2b08      	cmp	r3, #8
 8003610:	d10b      	bne.n	800362a <_printf_i+0x142>
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	07df      	lsls	r7, r3, #31
 8003616:	d508      	bpl.n	800362a <_printf_i+0x142>
 8003618:	6923      	ldr	r3, [r4, #16]
 800361a:	6861      	ldr	r1, [r4, #4]
 800361c:	4299      	cmp	r1, r3
 800361e:	bfde      	ittt	le
 8003620:	2330      	movle	r3, #48	@ 0x30
 8003622:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003626:	f106 36ff 	addle.w	r6, r6, #4294967295
 800362a:	1b92      	subs	r2, r2, r6
 800362c:	6122      	str	r2, [r4, #16]
 800362e:	f8cd a000 	str.w	sl, [sp]
 8003632:	464b      	mov	r3, r9
 8003634:	aa03      	add	r2, sp, #12
 8003636:	4621      	mov	r1, r4
 8003638:	4640      	mov	r0, r8
 800363a:	f7ff fee7 	bl	800340c <_printf_common>
 800363e:	3001      	adds	r0, #1
 8003640:	d14a      	bne.n	80036d8 <_printf_i+0x1f0>
 8003642:	f04f 30ff 	mov.w	r0, #4294967295
 8003646:	b004      	add	sp, #16
 8003648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	f043 0320 	orr.w	r3, r3, #32
 8003652:	6023      	str	r3, [r4, #0]
 8003654:	4832      	ldr	r0, [pc, #200]	@ (8003720 <_printf_i+0x238>)
 8003656:	2778      	movs	r7, #120	@ 0x78
 8003658:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	6831      	ldr	r1, [r6, #0]
 8003660:	061f      	lsls	r7, r3, #24
 8003662:	f851 5b04 	ldr.w	r5, [r1], #4
 8003666:	d402      	bmi.n	800366e <_printf_i+0x186>
 8003668:	065f      	lsls	r7, r3, #25
 800366a:	bf48      	it	mi
 800366c:	b2ad      	uxthmi	r5, r5
 800366e:	6031      	str	r1, [r6, #0]
 8003670:	07d9      	lsls	r1, r3, #31
 8003672:	bf44      	itt	mi
 8003674:	f043 0320 	orrmi.w	r3, r3, #32
 8003678:	6023      	strmi	r3, [r4, #0]
 800367a:	b11d      	cbz	r5, 8003684 <_printf_i+0x19c>
 800367c:	2310      	movs	r3, #16
 800367e:	e7ad      	b.n	80035dc <_printf_i+0xf4>
 8003680:	4826      	ldr	r0, [pc, #152]	@ (800371c <_printf_i+0x234>)
 8003682:	e7e9      	b.n	8003658 <_printf_i+0x170>
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	f023 0320 	bic.w	r3, r3, #32
 800368a:	6023      	str	r3, [r4, #0]
 800368c:	e7f6      	b.n	800367c <_printf_i+0x194>
 800368e:	4616      	mov	r6, r2
 8003690:	e7bd      	b.n	800360e <_printf_i+0x126>
 8003692:	6833      	ldr	r3, [r6, #0]
 8003694:	6825      	ldr	r5, [r4, #0]
 8003696:	6961      	ldr	r1, [r4, #20]
 8003698:	1d18      	adds	r0, r3, #4
 800369a:	6030      	str	r0, [r6, #0]
 800369c:	062e      	lsls	r6, r5, #24
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	d501      	bpl.n	80036a6 <_printf_i+0x1be>
 80036a2:	6019      	str	r1, [r3, #0]
 80036a4:	e002      	b.n	80036ac <_printf_i+0x1c4>
 80036a6:	0668      	lsls	r0, r5, #25
 80036a8:	d5fb      	bpl.n	80036a2 <_printf_i+0x1ba>
 80036aa:	8019      	strh	r1, [r3, #0]
 80036ac:	2300      	movs	r3, #0
 80036ae:	6123      	str	r3, [r4, #16]
 80036b0:	4616      	mov	r6, r2
 80036b2:	e7bc      	b.n	800362e <_printf_i+0x146>
 80036b4:	6833      	ldr	r3, [r6, #0]
 80036b6:	1d1a      	adds	r2, r3, #4
 80036b8:	6032      	str	r2, [r6, #0]
 80036ba:	681e      	ldr	r6, [r3, #0]
 80036bc:	6862      	ldr	r2, [r4, #4]
 80036be:	2100      	movs	r1, #0
 80036c0:	4630      	mov	r0, r6
 80036c2:	f7fc fd95 	bl	80001f0 <memchr>
 80036c6:	b108      	cbz	r0, 80036cc <_printf_i+0x1e4>
 80036c8:	1b80      	subs	r0, r0, r6
 80036ca:	6060      	str	r0, [r4, #4]
 80036cc:	6863      	ldr	r3, [r4, #4]
 80036ce:	6123      	str	r3, [r4, #16]
 80036d0:	2300      	movs	r3, #0
 80036d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036d6:	e7aa      	b.n	800362e <_printf_i+0x146>
 80036d8:	6923      	ldr	r3, [r4, #16]
 80036da:	4632      	mov	r2, r6
 80036dc:	4649      	mov	r1, r9
 80036de:	4640      	mov	r0, r8
 80036e0:	47d0      	blx	sl
 80036e2:	3001      	adds	r0, #1
 80036e4:	d0ad      	beq.n	8003642 <_printf_i+0x15a>
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	079b      	lsls	r3, r3, #30
 80036ea:	d413      	bmi.n	8003714 <_printf_i+0x22c>
 80036ec:	68e0      	ldr	r0, [r4, #12]
 80036ee:	9b03      	ldr	r3, [sp, #12]
 80036f0:	4298      	cmp	r0, r3
 80036f2:	bfb8      	it	lt
 80036f4:	4618      	movlt	r0, r3
 80036f6:	e7a6      	b.n	8003646 <_printf_i+0x15e>
 80036f8:	2301      	movs	r3, #1
 80036fa:	4632      	mov	r2, r6
 80036fc:	4649      	mov	r1, r9
 80036fe:	4640      	mov	r0, r8
 8003700:	47d0      	blx	sl
 8003702:	3001      	adds	r0, #1
 8003704:	d09d      	beq.n	8003642 <_printf_i+0x15a>
 8003706:	3501      	adds	r5, #1
 8003708:	68e3      	ldr	r3, [r4, #12]
 800370a:	9903      	ldr	r1, [sp, #12]
 800370c:	1a5b      	subs	r3, r3, r1
 800370e:	42ab      	cmp	r3, r5
 8003710:	dcf2      	bgt.n	80036f8 <_printf_i+0x210>
 8003712:	e7eb      	b.n	80036ec <_printf_i+0x204>
 8003714:	2500      	movs	r5, #0
 8003716:	f104 0619 	add.w	r6, r4, #25
 800371a:	e7f5      	b.n	8003708 <_printf_i+0x220>
 800371c:	08003909 	.word	0x08003909
 8003720:	0800391a 	.word	0x0800391a

08003724 <memmove>:
 8003724:	4288      	cmp	r0, r1
 8003726:	b510      	push	{r4, lr}
 8003728:	eb01 0402 	add.w	r4, r1, r2
 800372c:	d902      	bls.n	8003734 <memmove+0x10>
 800372e:	4284      	cmp	r4, r0
 8003730:	4623      	mov	r3, r4
 8003732:	d807      	bhi.n	8003744 <memmove+0x20>
 8003734:	1e43      	subs	r3, r0, #1
 8003736:	42a1      	cmp	r1, r4
 8003738:	d008      	beq.n	800374c <memmove+0x28>
 800373a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800373e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003742:	e7f8      	b.n	8003736 <memmove+0x12>
 8003744:	4402      	add	r2, r0
 8003746:	4601      	mov	r1, r0
 8003748:	428a      	cmp	r2, r1
 800374a:	d100      	bne.n	800374e <memmove+0x2a>
 800374c:	bd10      	pop	{r4, pc}
 800374e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003752:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003756:	e7f7      	b.n	8003748 <memmove+0x24>

08003758 <_sbrk_r>:
 8003758:	b538      	push	{r3, r4, r5, lr}
 800375a:	4d06      	ldr	r5, [pc, #24]	@ (8003774 <_sbrk_r+0x1c>)
 800375c:	2300      	movs	r3, #0
 800375e:	4604      	mov	r4, r0
 8003760:	4608      	mov	r0, r1
 8003762:	602b      	str	r3, [r5, #0]
 8003764:	f7fd fa72 	bl	8000c4c <_sbrk>
 8003768:	1c43      	adds	r3, r0, #1
 800376a:	d102      	bne.n	8003772 <_sbrk_r+0x1a>
 800376c:	682b      	ldr	r3, [r5, #0]
 800376e:	b103      	cbz	r3, 8003772 <_sbrk_r+0x1a>
 8003770:	6023      	str	r3, [r4, #0]
 8003772:	bd38      	pop	{r3, r4, r5, pc}
 8003774:	20000258 	.word	0x20000258

08003778 <_realloc_r>:
 8003778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800377c:	4607      	mov	r7, r0
 800377e:	4614      	mov	r4, r2
 8003780:	460d      	mov	r5, r1
 8003782:	b921      	cbnz	r1, 800378e <_realloc_r+0x16>
 8003784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003788:	4611      	mov	r1, r2
 800378a:	f7ff bc5b 	b.w	8003044 <_malloc_r>
 800378e:	b92a      	cbnz	r2, 800379c <_realloc_r+0x24>
 8003790:	f7ff fbec 	bl	8002f6c <_free_r>
 8003794:	4625      	mov	r5, r4
 8003796:	4628      	mov	r0, r5
 8003798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800379c:	f000 f81a 	bl	80037d4 <_malloc_usable_size_r>
 80037a0:	4284      	cmp	r4, r0
 80037a2:	4606      	mov	r6, r0
 80037a4:	d802      	bhi.n	80037ac <_realloc_r+0x34>
 80037a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80037aa:	d8f4      	bhi.n	8003796 <_realloc_r+0x1e>
 80037ac:	4621      	mov	r1, r4
 80037ae:	4638      	mov	r0, r7
 80037b0:	f7ff fc48 	bl	8003044 <_malloc_r>
 80037b4:	4680      	mov	r8, r0
 80037b6:	b908      	cbnz	r0, 80037bc <_realloc_r+0x44>
 80037b8:	4645      	mov	r5, r8
 80037ba:	e7ec      	b.n	8003796 <_realloc_r+0x1e>
 80037bc:	42b4      	cmp	r4, r6
 80037be:	4622      	mov	r2, r4
 80037c0:	4629      	mov	r1, r5
 80037c2:	bf28      	it	cs
 80037c4:	4632      	movcs	r2, r6
 80037c6:	f7ff fbc3 	bl	8002f50 <memcpy>
 80037ca:	4629      	mov	r1, r5
 80037cc:	4638      	mov	r0, r7
 80037ce:	f7ff fbcd 	bl	8002f6c <_free_r>
 80037d2:	e7f1      	b.n	80037b8 <_realloc_r+0x40>

080037d4 <_malloc_usable_size_r>:
 80037d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037d8:	1f18      	subs	r0, r3, #4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bfbc      	itt	lt
 80037de:	580b      	ldrlt	r3, [r1, r0]
 80037e0:	18c0      	addlt	r0, r0, r3
 80037e2:	4770      	bx	lr

080037e4 <_init>:
 80037e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e6:	bf00      	nop
 80037e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ea:	bc08      	pop	{r3}
 80037ec:	469e      	mov	lr, r3
 80037ee:	4770      	bx	lr

080037f0 <_fini>:
 80037f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f2:	bf00      	nop
 80037f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037f6:	bc08      	pop	{r3}
 80037f8:	469e      	mov	lr, r3
 80037fa:	4770      	bx	lr
